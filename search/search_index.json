{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ENTORNOS DE DESARROLLO. Unidad 1-1 Unidad 1-2 Unidad 1-3 Unidad 2-1 Unidad 2-2 Unidad 3 Unidad 4-1 Unidad 4-2 Unidad 4-3 Unidad 5 Unidad 6","title":"Home"},{"location":"#entornos-de-desarrollo","text":"Unidad 1-1 Unidad 1-2 Unidad 1-3 Unidad 2-1 Unidad 2-2 Unidad 3 Unidad 4-1 Unidad 4-2 Unidad 4-3 Unidad 5 Unidad 6","title":"ENTORNOS DE DESARROLLO."},{"location":"Ejercicios_Unidad_5/","text":"Ejercicios Unidad 5 UML 1). \u00bfQu\u00e9 significan las siglas UML? Busca informaci\u00f3n acerca de su historia y las versiones que han existido y el a\u00f1o de publicaci\u00f3n. Las siglas UML significa Unified Modeling Language (lenguaje unificado de modelado), es un lenguaje visual de prop\u00f3sito general para representar modelos que pretende proporcionar una forma est\u00e1ndar de representar el dise\u00f1o de un sistema. En la que dispone de numerosos tipos de diagramas, cada tipo de diagrama tiene diferente modelo. Historia : El lenguaje UML comenz\u00f3 a gestarse en octubre de 1994, cuando Rumbaugh se uni\u00f3 a la compa\u00f1\u00eda Rational fundada por Booch (dos reputados investigadores en el \u00e1rea de metodolog\u00eda del software). Cuyos objetivo era unificar dos m\u00e9todos que hab\u00edan desarrollado: el m\u00e9todo Booch y el OMT (Object Modelling Tool ). El primer borrador apareci\u00f3 en octubre de 1995. M\u00e1s tarde se uni\u00f3 otro reputado investigador, Jacobson, y se icluyeron ideas suyas. Estas tres personas son conocidas como los \u201c tres amigos \u201d. Adem\u00e1s, este lenguaje se abri\u00f3 a la colaboraci\u00f3n de otras empresas para que aportaran sus ideas. Todas estas colaboraciones condujeron a la definici\u00f3n de la primera versi\u00f3n de UML. De las tres metodolog\u00edas de partida: las de Booch y Rumbaugh pueden ser descritas como centradas en objetos (se enfocan hacia el modelado de los objetos) y la metodolog\u00eda de Jacobson es m\u00e1s centrada a usuario (su m\u00e9todo se deriva de los escenarios de uso). Por otro lado, UML se ha ido fomentando y aceptando como est\u00e1ndar desde el OMG. En 1997 UML 1.1 fue aprobada por la OMG convirti\u00e9ndose en la notaci\u00f3n est\u00e1ndar de facto para el an\u00e1lisis y el dise\u00f1o orientado a objetos. Versiones : Unified Modeling Language (UML) Versi\u00f3n 0.8 y 0.9 (1995) Unified Modeling Language (UML) Versi\u00f3n 1.0 y 1.1 (A\u00f1o 1997) Unified Modeling Language (UML) Versi\u00f3n 1.3 (2000) Unified Modeling Language (UML) Versi\u00f3n 1.4 (2001) Unified Modeling Language (UML) Versi\u00f3n 1.5 (2003) Unified Modeling Language (UML) Versi\u00f3n 1.4.2 y 2.0 (A\u00f1o 2005) Unified Modeling Language (UML) Versi\u00f3n 2.1 (2006) Unified Modeling Language (UML) Versi\u00f3n 2.1.1 y 2.1.2 (2007) Unified Modeling Language (UML) Versi\u00f3n 2.2 (2009) Unified Modeling Language (UML) Versi\u00f3n 2.3 (2010) Unified Modeling Language (UML) Versi\u00f3n 2.4.1 (2011) Unified Modeling Language (UML) Versi\u00f3n 2.5 (2015) 2). Indica los tipos de diagramas de estructura que existen en UML. Diagramas de estructura (aspecto est\u00e1tico): Diagrama de Clases Diagrama de Componentes Diagrama de Objetos Diagrama de Estructura compuesta Diagrama de Despliegue Diagrama de Paquetes 3). Indica los tipos de diagramas de comportamiento que existen en UML. Diagramas de comportamiento (aspecto din\u00e1mico): Diagrama de Actividad Diagrama de Casos de uso Diagrama de Maquina de estado Diagrama de Interacci\u00f3n Digrama de Tiempos Diagrama de Secuencias Diagrama de Comunicaci\u00f3n Diagrama Global de interacciones Diagramas de clases 1). Siguiendo la notaci\u00f3n UML, pon 2 ejemplos de clases distintos a los vistos en este tema. 2). Siguiendo la notaci\u00f3n UML, pon 2 ejemplos de interfaces distintos a los vistos en este tema. 3). Indica los tipos de relaciones que pueden darse y explica brevemente. Asociaci\u00f3n : es una relaci\u00f3n estructural que describe una conexi\u00f3n entre objetos. Se muestra como una l\u00ednea continua que une las clases relacionadas entre s\u00ed. Agregaci\u00f3n : es un tipo de asociaci\u00f3n m\u00e1s espec\u00edfico que indica que una clase es \"parte de\" otra clase (composici\u00f3n d\u00e9bil). Composici\u00f3n : es una forma fuerte de composici\u00f3n donde la vida de la clase contenida debe coincidir con la vida de la clase contenedor. Este tipo de relaci\u00f3n se utiliza para representar la dependencia de los objetos de la entidad focal. Dependencia : este es un tipo de relaci\u00f3n m\u00e1s d\u00e9bil que se usa cuando un objeto no est\u00e1 contenido en ning\u00fan campo. Generalizaci\u00f3n : se utiliza para representar las relaciones de la clase principal y la clase secundaria. Se puede ver una \"especie de\" relaci\u00f3n entre los clasificadores y c\u00f3mo una entidad se basa en la otra, heredando los atributos, las operaciones y las relaciones de los padres. Realizaci\u00f3n : es una relaci\u00f3n que vincula dos elementos del modelo con un clasificador realizando el comportamiento de otro clasificador. Esta relaci\u00f3n ayuda a comprender c\u00f3mo afecta la interfaz a la clase de implementaci\u00f3n. 4). Siguiendo la notaci\u00f3n UML, indica la representaci\u00f3n gr\u00e1fica de las relaciones de la actividad anterior. Software 1). En Netbeans/IntelliJ, instala el plugin EasyUML/Diagrama.net . 2). Escoge uno de tus proyectos realizado en Java que disponga de varias clases. Genera el diagrama de clases haciendo uso del plugin EasyUML/Diagrama.net . 3). Haciendo uso del plugin EasyUML/Diagrama.net dise\u00f1a un proyecto con varias clases y genera el c\u00f3digo autom\u00e1ticamente.","title":"Unidad 5"},{"location":"Ejercicios_Unidad_5/#ejercicios-unidad-5","text":"","title":"Ejercicios Unidad 5"},{"location":"Ejercicios_Unidad_5/#uml","text":"1). \u00bfQu\u00e9 significan las siglas UML? Busca informaci\u00f3n acerca de su historia y las versiones que han existido y el a\u00f1o de publicaci\u00f3n. Las siglas UML significa Unified Modeling Language (lenguaje unificado de modelado), es un lenguaje visual de prop\u00f3sito general para representar modelos que pretende proporcionar una forma est\u00e1ndar de representar el dise\u00f1o de un sistema. En la que dispone de numerosos tipos de diagramas, cada tipo de diagrama tiene diferente modelo. Historia : El lenguaje UML comenz\u00f3 a gestarse en octubre de 1994, cuando Rumbaugh se uni\u00f3 a la compa\u00f1\u00eda Rational fundada por Booch (dos reputados investigadores en el \u00e1rea de metodolog\u00eda del software). Cuyos objetivo era unificar dos m\u00e9todos que hab\u00edan desarrollado: el m\u00e9todo Booch y el OMT (Object Modelling Tool ). El primer borrador apareci\u00f3 en octubre de 1995. M\u00e1s tarde se uni\u00f3 otro reputado investigador, Jacobson, y se icluyeron ideas suyas. Estas tres personas son conocidas como los \u201c tres amigos \u201d. Adem\u00e1s, este lenguaje se abri\u00f3 a la colaboraci\u00f3n de otras empresas para que aportaran sus ideas. Todas estas colaboraciones condujeron a la definici\u00f3n de la primera versi\u00f3n de UML. De las tres metodolog\u00edas de partida: las de Booch y Rumbaugh pueden ser descritas como centradas en objetos (se enfocan hacia el modelado de los objetos) y la metodolog\u00eda de Jacobson es m\u00e1s centrada a usuario (su m\u00e9todo se deriva de los escenarios de uso). Por otro lado, UML se ha ido fomentando y aceptando como est\u00e1ndar desde el OMG. En 1997 UML 1.1 fue aprobada por la OMG convirti\u00e9ndose en la notaci\u00f3n est\u00e1ndar de facto para el an\u00e1lisis y el dise\u00f1o orientado a objetos. Versiones : Unified Modeling Language (UML) Versi\u00f3n 0.8 y 0.9 (1995) Unified Modeling Language (UML) Versi\u00f3n 1.0 y 1.1 (A\u00f1o 1997) Unified Modeling Language (UML) Versi\u00f3n 1.3 (2000) Unified Modeling Language (UML) Versi\u00f3n 1.4 (2001) Unified Modeling Language (UML) Versi\u00f3n 1.5 (2003) Unified Modeling Language (UML) Versi\u00f3n 1.4.2 y 2.0 (A\u00f1o 2005) Unified Modeling Language (UML) Versi\u00f3n 2.1 (2006) Unified Modeling Language (UML) Versi\u00f3n 2.1.1 y 2.1.2 (2007) Unified Modeling Language (UML) Versi\u00f3n 2.2 (2009) Unified Modeling Language (UML) Versi\u00f3n 2.3 (2010) Unified Modeling Language (UML) Versi\u00f3n 2.4.1 (2011) Unified Modeling Language (UML) Versi\u00f3n 2.5 (2015) 2). Indica los tipos de diagramas de estructura que existen en UML. Diagramas de estructura (aspecto est\u00e1tico): Diagrama de Clases Diagrama de Componentes Diagrama de Objetos Diagrama de Estructura compuesta Diagrama de Despliegue Diagrama de Paquetes 3). Indica los tipos de diagramas de comportamiento que existen en UML. Diagramas de comportamiento (aspecto din\u00e1mico): Diagrama de Actividad Diagrama de Casos de uso Diagrama de Maquina de estado Diagrama de Interacci\u00f3n Digrama de Tiempos Diagrama de Secuencias Diagrama de Comunicaci\u00f3n Diagrama Global de interacciones","title":"UML"},{"location":"Ejercicios_Unidad_5/#diagramas-de-clases","text":"1). Siguiendo la notaci\u00f3n UML, pon 2 ejemplos de clases distintos a los vistos en este tema. 2). Siguiendo la notaci\u00f3n UML, pon 2 ejemplos de interfaces distintos a los vistos en este tema. 3). Indica los tipos de relaciones que pueden darse y explica brevemente. Asociaci\u00f3n : es una relaci\u00f3n estructural que describe una conexi\u00f3n entre objetos. Se muestra como una l\u00ednea continua que une las clases relacionadas entre s\u00ed. Agregaci\u00f3n : es un tipo de asociaci\u00f3n m\u00e1s espec\u00edfico que indica que una clase es \"parte de\" otra clase (composici\u00f3n d\u00e9bil). Composici\u00f3n : es una forma fuerte de composici\u00f3n donde la vida de la clase contenida debe coincidir con la vida de la clase contenedor. Este tipo de relaci\u00f3n se utiliza para representar la dependencia de los objetos de la entidad focal. Dependencia : este es un tipo de relaci\u00f3n m\u00e1s d\u00e9bil que se usa cuando un objeto no est\u00e1 contenido en ning\u00fan campo. Generalizaci\u00f3n : se utiliza para representar las relaciones de la clase principal y la clase secundaria. Se puede ver una \"especie de\" relaci\u00f3n entre los clasificadores y c\u00f3mo una entidad se basa en la otra, heredando los atributos, las operaciones y las relaciones de los padres. Realizaci\u00f3n : es una relaci\u00f3n que vincula dos elementos del modelo con un clasificador realizando el comportamiento de otro clasificador. Esta relaci\u00f3n ayuda a comprender c\u00f3mo afecta la interfaz a la clase de implementaci\u00f3n. 4). Siguiendo la notaci\u00f3n UML, indica la representaci\u00f3n gr\u00e1fica de las relaciones de la actividad anterior.","title":"Diagramas de clases"},{"location":"Ejercicios_Unidad_5/#software","text":"1). En Netbeans/IntelliJ, instala el plugin EasyUML/Diagrama.net . 2). Escoge uno de tus proyectos realizado en Java que disponga de varias clases. Genera el diagrama de clases haciendo uso del plugin EasyUML/Diagrama.net . 3). Haciendo uso del plugin EasyUML/Diagrama.net dise\u00f1a un proyecto con varias clases y genera el c\u00f3digo autom\u00e1ticamente.","title":"Software"},{"location":"Ejercicios_Unidad_6/","text":"Ejercicios Unidad 6 Diagramas de casos de uso 1). Nombra y describe brevemente los elementos que se utilizan en un diagrama de casos de uso. Busca informaci\u00f3n si es necesario. Los elementos de Diagramas de casos de uso : Actores : es cualquier entidad que desempe\u00f1e un papel en un sistema determinado. Puede ser una persona, una organizaci\u00f3n o un sistema externo. L\u00edmites del sistema (sujeto) : refleja los l\u00edmites o alcances que abarca un determinado sistema. Se utiliza para reflejar diferentes \u00e1reas dentro del mismo. Casos de uso : se utiliza para representar una de las funcionalidades que realiza el sistema. Es una secuencia de acciones que hace el sistema y que producen un resultado que puede percibir un usuario. Relaciones : la interacci\u00f3n entre dos casos de uso o de un actor con un caso de uso se representa por medio de una relaci\u00f3n. Las principales relaciones son: Generalizaci\u00f3n (Generalization), Inclusi\u00f3n (Include) y Extensi\u00f3n (Extends). 2). Por cada ejemplo de diagrama de casos de uso que aparece en las diapositivas, realiza su interpretaci\u00f3n. Escribe la descripci\u00f3n con tus palabras. Ejemplo 1 : En un sistema de compra digital se quiere organizar los datos de los clientes que compra online. Todos los clientes, tanto los que est\u00e1n registrados como los que son nuevos, son clientes de la web. Todos los clientes pueden ver los art\u00edculos de compra siempre y cuando est\u00e9n autentificados (con un proveedor de identidad, solo los registrados). Pero solo los registrados pueden comprar, los nuevos se tienen que hacerse cliente para poder hacer las compras. Para hacer la compra primero se tiene que autentificarse con un proveedor de identidad y luego acceder a los m\u00e9todos de pagos, puede ser a traves de pago de cr\u00e9dito o PayPal. En el m\u00e9todo de pago: Para poder acceder a la autentificaci\u00f3n de los clientes, se tiene que: \u200b => Autentificarse, se inicia sesi\u00f3n como usuario, guardar/recordar su usuario y luego iniciar su sesi\u00f3n (\u00fanico). \u200b => Luego pasar por el proveedor de identidad, se identifica con su inicio de sesi\u00f3n \u00fanico. Se puede ver los art\u00edculos comprado y/o subir su tarjeta de cr\u00e9dito para poder realizar su compra final/total. Tambi\u00e9n incluye los impuestos y los gastos de envi\u00f3 de la compra. Se puede pagar mediante pago de tarjeta de cr\u00e9dito o pago de PayPal. Ejemplo 2 : Para hospitalizar en un hospital, se tiene que estar registrado en el hospital que quiere. Para ello, la recepcionista tiene que acceder a la hospitalizaci\u00f3n del paciente, y luego al registro del paciente para poder programar el ingreso al hospital del paciente mediante una cita. A parte, el paciente debe presentar a la recepcionista sus informes m\u00e9dicos y los formularios/reclamaciones de seguros. En la hospitalizaci\u00f3n del paciente, el paciente puede estar ingresado en el ambulatorio o en los pacientes internados con su camas asignados a cada pacientes. Diagramas de secuencia 1). Nombra y describe brevemente los elementos que se utilizan en un diagrama de secuencia. Busca informaci\u00f3n si es necesario. Los elementos de Diagramas de secuencia : Objetos : son bloques de construcci\u00f3n b\u00e1sicos de los diagramas UML y representan ciertas caracter\u00edsticas de un elemento del sistema, que var\u00edan dependiendo del diagrama. L\u00edneas de vida : son l\u00edneas discontinuas que sale del objeto y avanza en el tiempo desde arriba hacia abajo. Mensajes : es un elemento con nombre que define un tipo espec\u00edfico de comunicaci\u00f3n entre l\u00edneas de vida de una interacci\u00f3n. Ocurrencias de Ejecuci\u00f3n : periodo de tiempo durante el cual un objeto est\u00e1 en ejecuci\u00f3n . Ocurrencias de destrucci\u00f3n : momento en el cual un objeto es destruido . 2). Por cada ejemplo de diagrama de secuencia que aparece en las diapositivas, realiza su interpretaci\u00f3n. Escribe la descripci\u00f3n con tus palabras. Ejemplo 1 : En la librer\u00eda online, el cliente online/ de la web puede acceder a la librer\u00eda online o poder comprar en una librer\u00eda digital. Se repite siempre las opciones/actividades: => El cliente puede buscar en la librer\u00eda online, en la que le devuelve el resultado de su b\u00fasqueda. => El cliente puede optar si quiere ver una resumen o una descripci\u00f3n del libro. => Tambi\u00e9n puede optar por si le gusta un libro y a\u00f1adirlo a la cesta de compra. Luego se opta para finalizar con un atributo de verificar la compra, por si ya no quiere comprar el libro. Ejemplo 2 : En un sistema de autentificaci\u00f3n de usuarios de Facebook, el personal/usuario obtiene su recurso FB para acceder al navegador web con un formulario de permiso. O puede entrar con su permiso de usuario, y luego se accede al servidor de Facebook, despu\u00e9s de pasar el proceso de permiso. Luego desde la web se accede a la aplicaci\u00f3n con una solicitud de acceso FB. O tambi\u00e9n puede acceder desde la web al servidor de autorizaci\u00f3n de Facebook con una autorizaci\u00f3n para permitir su acceso. Desde el acceso con el usuario, luego de acceder con el permiso de usuario, el sistema tiene como alternativa conceder el permiso de entrada a la aplicaci\u00f3n (autentificando el c\u00f3digo FB) y luego acceder al servidor de Facebook (autentificando tambi\u00e9n el c\u00f3digo FB) o al servidor de contenido del Facebook (con recurso FB de acceso de usuario protegido). El sistema protege el usuario luego de haber tenido el permiso de entrada. O desde el acceso con el usuario, como alternativa, cuando no concede el permiso de usuario, el sistema autom\u00e1ticamente, no permite la entrada a la aplicaci\u00f3n desde la web. Diagramas de estados 1). Nombra y describe brevemente los elementos que se utilizan en un diagrama de estados. Busca informaci\u00f3n si es necesario. Los elementos de Diagramas de estados : Estados : es una situaci\u00f3n durante la cual se cumple alguna condici\u00f3n invariante (generalmente impl\u00edcita). Esta situaci\u00f3n invariante puede representar una situaci\u00f3n est\u00e1tica (como un objeto que espera que ocurra alg\u00fan evento externo o cualquier otra situaci\u00f3n). Tambi\u00e9n puede modelar condiciones din\u00e1micas (como efectuar alg\u00fan tipo de comportamiento, es decir, el elemento ingresa al estado cuando el comportamiento comienza y lo deja tan pronto como se completa). Los tipos de estados: Simple: aquel que no tiene regiones ni estados de subm\u00e1quina. Compuesto: es aquel que tiene subestados. De subm\u00e1quina (pseudoestados): se usan generalmente para conectar m\u00faltiples transiciones en rutas de transici\u00f3n de estado m\u00e1s complejas. Siendo los m\u00e1s comunes los pseudoestados inicial y final. (Pseudoestado inicial) (Pseudoestado final) Transiciones : es una relaci\u00f3n dirigida entre un estado de origen y un estado de destino . 2). Por cada ejemplo de diagrama de estados que aparece en las diapositivas, realiza su interpretaci\u00f3n. Escribe la descripci\u00f3n con tus palabras. Ejemplo 1 : Para representar los diferentes estados del agua, donde pasa de estado de hielo a liquido, esta a su vez pasa a vapor de agua y que termina en plasma, o tambi\u00e9n puede ser viceversa. Primero, desde el estado de hielo puede pasar a ser: => Estado liquido, con una transici\u00f3n que derrite el hielo y se transforma en agua liquida. Y si es al contrario, la transici\u00f3n se llama congelaci\u00f3n . => Vapor de agua, con una transici\u00f3n que se llama sublimaci\u00f3n . Y viceversa es deposici\u00f3n o cristalizaci\u00f3n. Ahora desde el estado liquido puede pasar a ser: => Vapor de agua, con una transici\u00f3n denominado vaporizaci\u00f3n . Y viceversa se llama condensaci\u00f3n . => Estado de hielo. Y adem\u00e1s de que el vapor de agua puede pasar a ser estado liquido y estado de hielo, esta tambi\u00e9n puede ser: => Estado de plasma, con la transici\u00f3n de ionizaci\u00f3n , y viceversa, es desionizaci\u00f3n . Ejemplo 2 : Para ver los estados de una maquinaria de hilos, se hace uso de un diagrama de estado. El estado se inicia con un nuevo estado que empieza a ejecutarse, y esta a su vez, es decir, dentro de lo ejecutado, se inicia de nuevo y que pasa del estado preparado a corriendo o funcionando, donde se selecciona los hilos por un programador de hilo. Y as\u00ed pasa se termina el estado de ejecutable y se termina el hilo. Tambi\u00e9n, puede ser viceversa (del estado corriendo a estar preparado), en la que se puede ver el rendimiento del hilo y se suspende el estado por un programador de hilo. Unas de las alternativas del estado ejecutable es que pase a tiempo de espera, y desde aqu\u00ed se puede pasar a ejecutable, o bien puede directamente terminar. Y si hay un error se notifica el error y la operaci\u00f3n se obstruye. Otra de las alternativas es que pasa a espera, donde el estado puede pasar a ser obstruido y se notifica el error, o pasa directamente a terminado. La \u00faltima alternativa es que pase al estado obstruido y luego a estado ejecutable o se termina/finaliza. Diagramas de actividades 1). Nombra y describe brevemente los elementos que se utilizan en un diagrama de actividades. Busca informaci\u00f3n si es necesario. Los elementos de Diagramas de actividades : Actividades : es una conducta parametrizada representada como flujo coordinado de acciones . Puede ser simple o compuesto. Nodos (acci\u00f3n): es un elemento con nombre que representa un solo paso at\u00f3mico dentro de la actividad, para hacer una tarea dada. Nodo final : detiene todos los flujos en una actividad. Nodo inicial : inicia el flujo cuando se invoca la actividad. Nodo de decisi\u00f3n : flujo de actividad que pueden usar condiciones para su actuaci\u00f3n. Nodo de fusi\u00f3n : fusiona dos o m\u00e1s flujos y luego lo emite en un flujo. Nodo de bifurcaci\u00f3n : divide una acci\u00f3n en flujos concurrentes (se representa con una barra negra gruesa ). Nodo Bifurcaci\u00f3n ----------------------------------------------------- Nodo Uni\u00f3n Nodo de uni\u00f3n : recoge flujos concurrentes en una sola acci\u00f3n (se representa con una barra negra gruesa ). 2). Por cada ejemplo de diagrama de actividades que aparece en las diapositivas, realiza su interpretaci\u00f3n. Escribe la descripci\u00f3n con tus palabras. Ejemplo 1 : En un sistema de compra online, se inicia la actividad B con un nodo de decisi\u00f3n, que decide entre buscar y navegar en los art\u00edculos. Esta se fusiona cuando ya tiene la decisi\u00f3n de buscar art\u00edculos, como resultado acaba en otro nodo de decisi\u00f3n, en la que encuentra o no encuentra los art\u00edculos seleccionado, y que acaba con poder ver los art\u00edculos que ha seleccionado. A continuaci\u00f3n, puede tomar la decisi\u00f3n de a\u00f1adirlo a la cesta de compra, en la que toma la decisi\u00f3n de si quiere procesar la actividad B o ver la cesta de la actividad A. Esta \u00faltima lleva a la acci\u00f3n de ver la cesta de compra y lo dirige a un nodo de decisi\u00f3n, en la cual puede hacer m\u00e1s compra o actualizar la cesta de compra por si quiere cambiar algo, o bien puede finalizar/acabar la compra de la actividad C. A parte, con una recepci\u00f3n de se\u00f1al, que comprueba la cesta de compra de la actividad A. Acompa\u00f1ado de una nota, en que la dice que la cesta de compra puede ser comprobado las veces que quiere. Una vez, comprobado la compra, se procede al pago de los art\u00edculos, con otro recepci\u00f3n de se\u00f1al. Con la cual se fusiona con la actividad C y acaba con al acci\u00f3n de pago, y esta a su vez se finaliza y termina todo el sistema de compra. Ejemplo 2 : Para que funcione el sistema que procesa ordenes, se inicia con que recibe una orden que anteriormente lo solicita. Esta sigue adelante, hasta que tiene que tomar una decisi\u00f3n de que la orden fue aceptada o la orden fue rechazada. Si la orden fue rechazada la acci\u00f3n termina con una orden cerrada y finaliza todo el proceso. Pero si la orden es aceptada, se completa las ordenes recibidas. Luego el flujo de la acci\u00f3n se ramifica/divide en dos flujos paralelos, ambos son para enviar la orden. Una es directamente y la otra pasa por la factura y acaba en la aceptaci\u00f3n del pago. Para finalizar, ambos flujos de unen otra vez en un solo flujo, y desde ah\u00ed se cierra el orden y finaliza todo. Ejemplo 3 : En un proceso de documentaci\u00f3n, tiene que pasar por varios secciones: autor, revisi\u00f3n, aprobador y due\u00f1o. Primero en la secci\u00f3n de autor, donde se inicia la creaci\u00f3n de los documentos o borradores, en la que luego se pasa a la secci\u00f3n de revisi\u00f3n, donde se revisa los borradores. A continuaci\u00f3n, los documentos revisados son llevado a la secci\u00f3n de aprobador, donde se aprueba los documentos revisado. Esta puede tomar la decisi\u00f3n de si el documento es aprobado o no aprobado. En caso de que el documento no es aprobado, se vuelve a la secci\u00f3n del autor para actualizar los cambios. Pero en caso de que es aceptado, los documentos aprobados/eficaz son revisado de nuevo en la secci\u00f3n de revisi\u00f3n, en que la decide que los documentos necesita cambio o no. Si se necesita cambio, el documento de actualiza con los cambios que se le solicitaron en la secci\u00f3n del autor. Pero si no necesita cambio, es decir, que esta obsoleto, pasa a la secci\u00f3n de due\u00f1o, en archivado en archivo, y son dominados documentos archivados y finaliza el proceso de documentaci\u00f3n.","title":"Unidad 6"},{"location":"Ejercicios_Unidad_6/#ejercicios-unidad-6","text":"","title":"Ejercicios Unidad 6"},{"location":"Ejercicios_Unidad_6/#diagramas-de-casos-de-uso","text":"1). Nombra y describe brevemente los elementos que se utilizan en un diagrama de casos de uso. Busca informaci\u00f3n si es necesario. Los elementos de Diagramas de casos de uso : Actores : es cualquier entidad que desempe\u00f1e un papel en un sistema determinado. Puede ser una persona, una organizaci\u00f3n o un sistema externo. L\u00edmites del sistema (sujeto) : refleja los l\u00edmites o alcances que abarca un determinado sistema. Se utiliza para reflejar diferentes \u00e1reas dentro del mismo. Casos de uso : se utiliza para representar una de las funcionalidades que realiza el sistema. Es una secuencia de acciones que hace el sistema y que producen un resultado que puede percibir un usuario. Relaciones : la interacci\u00f3n entre dos casos de uso o de un actor con un caso de uso se representa por medio de una relaci\u00f3n. Las principales relaciones son: Generalizaci\u00f3n (Generalization), Inclusi\u00f3n (Include) y Extensi\u00f3n (Extends). 2). Por cada ejemplo de diagrama de casos de uso que aparece en las diapositivas, realiza su interpretaci\u00f3n. Escribe la descripci\u00f3n con tus palabras. Ejemplo 1 : En un sistema de compra digital se quiere organizar los datos de los clientes que compra online. Todos los clientes, tanto los que est\u00e1n registrados como los que son nuevos, son clientes de la web. Todos los clientes pueden ver los art\u00edculos de compra siempre y cuando est\u00e9n autentificados (con un proveedor de identidad, solo los registrados). Pero solo los registrados pueden comprar, los nuevos se tienen que hacerse cliente para poder hacer las compras. Para hacer la compra primero se tiene que autentificarse con un proveedor de identidad y luego acceder a los m\u00e9todos de pagos, puede ser a traves de pago de cr\u00e9dito o PayPal. En el m\u00e9todo de pago: Para poder acceder a la autentificaci\u00f3n de los clientes, se tiene que: \u200b => Autentificarse, se inicia sesi\u00f3n como usuario, guardar/recordar su usuario y luego iniciar su sesi\u00f3n (\u00fanico). \u200b => Luego pasar por el proveedor de identidad, se identifica con su inicio de sesi\u00f3n \u00fanico. Se puede ver los art\u00edculos comprado y/o subir su tarjeta de cr\u00e9dito para poder realizar su compra final/total. Tambi\u00e9n incluye los impuestos y los gastos de envi\u00f3 de la compra. Se puede pagar mediante pago de tarjeta de cr\u00e9dito o pago de PayPal. Ejemplo 2 : Para hospitalizar en un hospital, se tiene que estar registrado en el hospital que quiere. Para ello, la recepcionista tiene que acceder a la hospitalizaci\u00f3n del paciente, y luego al registro del paciente para poder programar el ingreso al hospital del paciente mediante una cita. A parte, el paciente debe presentar a la recepcionista sus informes m\u00e9dicos y los formularios/reclamaciones de seguros. En la hospitalizaci\u00f3n del paciente, el paciente puede estar ingresado en el ambulatorio o en los pacientes internados con su camas asignados a cada pacientes.","title":"Diagramas de casos de uso"},{"location":"Ejercicios_Unidad_6/#diagramas-de-secuencia","text":"1). Nombra y describe brevemente los elementos que se utilizan en un diagrama de secuencia. Busca informaci\u00f3n si es necesario. Los elementos de Diagramas de secuencia : Objetos : son bloques de construcci\u00f3n b\u00e1sicos de los diagramas UML y representan ciertas caracter\u00edsticas de un elemento del sistema, que var\u00edan dependiendo del diagrama. L\u00edneas de vida : son l\u00edneas discontinuas que sale del objeto y avanza en el tiempo desde arriba hacia abajo. Mensajes : es un elemento con nombre que define un tipo espec\u00edfico de comunicaci\u00f3n entre l\u00edneas de vida de una interacci\u00f3n. Ocurrencias de Ejecuci\u00f3n : periodo de tiempo durante el cual un objeto est\u00e1 en ejecuci\u00f3n . Ocurrencias de destrucci\u00f3n : momento en el cual un objeto es destruido . 2). Por cada ejemplo de diagrama de secuencia que aparece en las diapositivas, realiza su interpretaci\u00f3n. Escribe la descripci\u00f3n con tus palabras. Ejemplo 1 : En la librer\u00eda online, el cliente online/ de la web puede acceder a la librer\u00eda online o poder comprar en una librer\u00eda digital. Se repite siempre las opciones/actividades: => El cliente puede buscar en la librer\u00eda online, en la que le devuelve el resultado de su b\u00fasqueda. => El cliente puede optar si quiere ver una resumen o una descripci\u00f3n del libro. => Tambi\u00e9n puede optar por si le gusta un libro y a\u00f1adirlo a la cesta de compra. Luego se opta para finalizar con un atributo de verificar la compra, por si ya no quiere comprar el libro. Ejemplo 2 : En un sistema de autentificaci\u00f3n de usuarios de Facebook, el personal/usuario obtiene su recurso FB para acceder al navegador web con un formulario de permiso. O puede entrar con su permiso de usuario, y luego se accede al servidor de Facebook, despu\u00e9s de pasar el proceso de permiso. Luego desde la web se accede a la aplicaci\u00f3n con una solicitud de acceso FB. O tambi\u00e9n puede acceder desde la web al servidor de autorizaci\u00f3n de Facebook con una autorizaci\u00f3n para permitir su acceso. Desde el acceso con el usuario, luego de acceder con el permiso de usuario, el sistema tiene como alternativa conceder el permiso de entrada a la aplicaci\u00f3n (autentificando el c\u00f3digo FB) y luego acceder al servidor de Facebook (autentificando tambi\u00e9n el c\u00f3digo FB) o al servidor de contenido del Facebook (con recurso FB de acceso de usuario protegido). El sistema protege el usuario luego de haber tenido el permiso de entrada. O desde el acceso con el usuario, como alternativa, cuando no concede el permiso de usuario, el sistema autom\u00e1ticamente, no permite la entrada a la aplicaci\u00f3n desde la web.","title":"Diagramas de secuencia"},{"location":"Ejercicios_Unidad_6/#diagramas-de-estados","text":"1). Nombra y describe brevemente los elementos que se utilizan en un diagrama de estados. Busca informaci\u00f3n si es necesario. Los elementos de Diagramas de estados : Estados : es una situaci\u00f3n durante la cual se cumple alguna condici\u00f3n invariante (generalmente impl\u00edcita). Esta situaci\u00f3n invariante puede representar una situaci\u00f3n est\u00e1tica (como un objeto que espera que ocurra alg\u00fan evento externo o cualquier otra situaci\u00f3n). Tambi\u00e9n puede modelar condiciones din\u00e1micas (como efectuar alg\u00fan tipo de comportamiento, es decir, el elemento ingresa al estado cuando el comportamiento comienza y lo deja tan pronto como se completa). Los tipos de estados: Simple: aquel que no tiene regiones ni estados de subm\u00e1quina. Compuesto: es aquel que tiene subestados. De subm\u00e1quina (pseudoestados): se usan generalmente para conectar m\u00faltiples transiciones en rutas de transici\u00f3n de estado m\u00e1s complejas. Siendo los m\u00e1s comunes los pseudoestados inicial y final. (Pseudoestado inicial) (Pseudoestado final) Transiciones : es una relaci\u00f3n dirigida entre un estado de origen y un estado de destino . 2). Por cada ejemplo de diagrama de estados que aparece en las diapositivas, realiza su interpretaci\u00f3n. Escribe la descripci\u00f3n con tus palabras. Ejemplo 1 : Para representar los diferentes estados del agua, donde pasa de estado de hielo a liquido, esta a su vez pasa a vapor de agua y que termina en plasma, o tambi\u00e9n puede ser viceversa. Primero, desde el estado de hielo puede pasar a ser: => Estado liquido, con una transici\u00f3n que derrite el hielo y se transforma en agua liquida. Y si es al contrario, la transici\u00f3n se llama congelaci\u00f3n . => Vapor de agua, con una transici\u00f3n que se llama sublimaci\u00f3n . Y viceversa es deposici\u00f3n o cristalizaci\u00f3n. Ahora desde el estado liquido puede pasar a ser: => Vapor de agua, con una transici\u00f3n denominado vaporizaci\u00f3n . Y viceversa se llama condensaci\u00f3n . => Estado de hielo. Y adem\u00e1s de que el vapor de agua puede pasar a ser estado liquido y estado de hielo, esta tambi\u00e9n puede ser: => Estado de plasma, con la transici\u00f3n de ionizaci\u00f3n , y viceversa, es desionizaci\u00f3n . Ejemplo 2 : Para ver los estados de una maquinaria de hilos, se hace uso de un diagrama de estado. El estado se inicia con un nuevo estado que empieza a ejecutarse, y esta a su vez, es decir, dentro de lo ejecutado, se inicia de nuevo y que pasa del estado preparado a corriendo o funcionando, donde se selecciona los hilos por un programador de hilo. Y as\u00ed pasa se termina el estado de ejecutable y se termina el hilo. Tambi\u00e9n, puede ser viceversa (del estado corriendo a estar preparado), en la que se puede ver el rendimiento del hilo y se suspende el estado por un programador de hilo. Unas de las alternativas del estado ejecutable es que pase a tiempo de espera, y desde aqu\u00ed se puede pasar a ejecutable, o bien puede directamente terminar. Y si hay un error se notifica el error y la operaci\u00f3n se obstruye. Otra de las alternativas es que pasa a espera, donde el estado puede pasar a ser obstruido y se notifica el error, o pasa directamente a terminado. La \u00faltima alternativa es que pase al estado obstruido y luego a estado ejecutable o se termina/finaliza.","title":"Diagramas de estados"},{"location":"Ejercicios_Unidad_6/#diagramas-de-actividades","text":"1). Nombra y describe brevemente los elementos que se utilizan en un diagrama de actividades. Busca informaci\u00f3n si es necesario. Los elementos de Diagramas de actividades : Actividades : es una conducta parametrizada representada como flujo coordinado de acciones . Puede ser simple o compuesto. Nodos (acci\u00f3n): es un elemento con nombre que representa un solo paso at\u00f3mico dentro de la actividad, para hacer una tarea dada. Nodo final : detiene todos los flujos en una actividad. Nodo inicial : inicia el flujo cuando se invoca la actividad. Nodo de decisi\u00f3n : flujo de actividad que pueden usar condiciones para su actuaci\u00f3n. Nodo de fusi\u00f3n : fusiona dos o m\u00e1s flujos y luego lo emite en un flujo. Nodo de bifurcaci\u00f3n : divide una acci\u00f3n en flujos concurrentes (se representa con una barra negra gruesa ). Nodo Bifurcaci\u00f3n ----------------------------------------------------- Nodo Uni\u00f3n Nodo de uni\u00f3n : recoge flujos concurrentes en una sola acci\u00f3n (se representa con una barra negra gruesa ). 2). Por cada ejemplo de diagrama de actividades que aparece en las diapositivas, realiza su interpretaci\u00f3n. Escribe la descripci\u00f3n con tus palabras. Ejemplo 1 : En un sistema de compra online, se inicia la actividad B con un nodo de decisi\u00f3n, que decide entre buscar y navegar en los art\u00edculos. Esta se fusiona cuando ya tiene la decisi\u00f3n de buscar art\u00edculos, como resultado acaba en otro nodo de decisi\u00f3n, en la que encuentra o no encuentra los art\u00edculos seleccionado, y que acaba con poder ver los art\u00edculos que ha seleccionado. A continuaci\u00f3n, puede tomar la decisi\u00f3n de a\u00f1adirlo a la cesta de compra, en la que toma la decisi\u00f3n de si quiere procesar la actividad B o ver la cesta de la actividad A. Esta \u00faltima lleva a la acci\u00f3n de ver la cesta de compra y lo dirige a un nodo de decisi\u00f3n, en la cual puede hacer m\u00e1s compra o actualizar la cesta de compra por si quiere cambiar algo, o bien puede finalizar/acabar la compra de la actividad C. A parte, con una recepci\u00f3n de se\u00f1al, que comprueba la cesta de compra de la actividad A. Acompa\u00f1ado de una nota, en que la dice que la cesta de compra puede ser comprobado las veces que quiere. Una vez, comprobado la compra, se procede al pago de los art\u00edculos, con otro recepci\u00f3n de se\u00f1al. Con la cual se fusiona con la actividad C y acaba con al acci\u00f3n de pago, y esta a su vez se finaliza y termina todo el sistema de compra. Ejemplo 2 : Para que funcione el sistema que procesa ordenes, se inicia con que recibe una orden que anteriormente lo solicita. Esta sigue adelante, hasta que tiene que tomar una decisi\u00f3n de que la orden fue aceptada o la orden fue rechazada. Si la orden fue rechazada la acci\u00f3n termina con una orden cerrada y finaliza todo el proceso. Pero si la orden es aceptada, se completa las ordenes recibidas. Luego el flujo de la acci\u00f3n se ramifica/divide en dos flujos paralelos, ambos son para enviar la orden. Una es directamente y la otra pasa por la factura y acaba en la aceptaci\u00f3n del pago. Para finalizar, ambos flujos de unen otra vez en un solo flujo, y desde ah\u00ed se cierra el orden y finaliza todo. Ejemplo 3 : En un proceso de documentaci\u00f3n, tiene que pasar por varios secciones: autor, revisi\u00f3n, aprobador y due\u00f1o. Primero en la secci\u00f3n de autor, donde se inicia la creaci\u00f3n de los documentos o borradores, en la que luego se pasa a la secci\u00f3n de revisi\u00f3n, donde se revisa los borradores. A continuaci\u00f3n, los documentos revisados son llevado a la secci\u00f3n de aprobador, donde se aprueba los documentos revisado. Esta puede tomar la decisi\u00f3n de si el documento es aprobado o no aprobado. En caso de que el documento no es aprobado, se vuelve a la secci\u00f3n del autor para actualizar los cambios. Pero en caso de que es aceptado, los documentos aprobados/eficaz son revisado de nuevo en la secci\u00f3n de revisi\u00f3n, en que la decide que los documentos necesita cambio o no. Si se necesita cambio, el documento de actualiza con los cambios que se le solicitaron en la secci\u00f3n del autor. Pero si no necesita cambio, es decir, que esta obsoleto, pasa a la secci\u00f3n de due\u00f1o, en archivado en archivo, y son dominados documentos archivados y finaliza el proceso de documentaci\u00f3n.","title":"Diagramas de actividades"},{"location":"Ejericicios_Unidad_3/","text":"Pruebas 1) \u00bfQu\u00e9 diferencia existe entre las pruebas est\u00e1ticas y din\u00e1micas? La diferencia entre ambos es: En las pruebas est\u00e1ticas : las pruebas se realiza sin ejecutar el c\u00f3digo de la aplicaci\u00f3n. Y se examinan o revisa el c\u00f3digo fuente. Y en las pruebas din\u00e1micas : todas las pruebas se realiza ejecutando el c\u00f3digo de la aplicaci\u00f3n. Tambi\u00e9n se permite el uso de caja negra y caja blanca con mayor amplitud. Y permiten medir el comportamiento de la aplicaci\u00f3n desarrollada. Puedes consultar: https://es.wikipedia.org/wiki/Pruebas_de_software 2) \u00bfQu\u00e9 diferencia existe entre las pruebas de caja negra y caja blanca? La diferencia entre ambos es: Las pruebas de caja negra : son casos de pruebas donde se dise\u00f1an considerando exclusivamente las entradas y las salidas del sistema, sin preocuparse de la estructura interna del mismo. En resumen, se estudia el sistema desde fuera. Son pruebas de funcionalidad . Las pruebas de caja blanca : son casos de pruebas que examina el c\u00f3digo fuente y su ejecuci\u00f3n. Son pruebas estructurales . Puedes consultar: https://es.wikipedia.org/wiki/Pruebas_de_software 3) \u00bfQu\u00e9 diferencia existe entre las pruebas funcionales y no funcionales? La diferencia entre ambos es: Las pruebas funcionales : es una prueba basada en la ejecuci\u00f3n, revisi\u00f3n y retroalimentaci\u00f3n de las funcionalidades previamente dise\u00f1adas para el software. Eval\u00faan el cumplimiento de los requisitos funcionales . Las pruebas no funcionales : es una prueba cuyo objetivo es la verificaci\u00f3n de un requisito que especifica criterios que pueden usarse para juzgar la operaci\u00f3n de un sistema. Eval\u00faan aspectos adicionales como rendimiento, seguridad, ... Puedes consultar: https://es.wikipedia.org/wiki/Pruebas_de_software 4) Nombra al menos 4 pruebas funcionales. Pruebas funcionales : Pruebas unitarias (o de unidad) Pruebas de regresi\u00f3n Pruebas de integraci\u00f3n Pruebas del sistema 5) Nombra al menos 4 pruebas no funcionales. Pruebas NO funcionales : Pruebas de usabilidad Pruebas de rendimiento Pruebas de seguridad Pruebas de compatibilidad 6) \u00bfQu\u00e9 son las pruebas unitarias o pruebas de unidad? Las pruebas unitarias (o de unidad) consisten en verificar el correcto funcionamiento de las unidades individuales m\u00e1s peque\u00f1as de los programas inform\u00e1ticos. Se utiliza para garantizar que la unidad de c\u00f3digo funciona correctamente y cumple con los requisitos especificados. 7) \u00bfQu\u00e9 son las pruebas de regresi\u00f3n? Las pruebas de regresi\u00f3n : es el proceso de probar un producto de software despu\u00e9s de que se hayan realizado cambios para garantizar que no se hayan introducido nuevos errores como resultado de los cambios. 8) \u00bfQu\u00e9 son las pruebas de integraci\u00f3n? Las pruebas de integraci\u00f3n : se realizan a continuaci\u00f3n de las unitarias, su objetivo es comprobar que todos los elementos unitarios que componen el software, funcionan correctamente cuando cooperan entre s\u00ed para realizar las tareas encomendadas al programa. 9) \u00bfQu\u00e9 son las pruebas de humo? Las pruebas de humo : son una revisi\u00f3n r\u00e1pida de un producto de software para comprobar que funciona y no tiene defectos evidentes que interrumpan la operaci\u00f3n b\u00e1sica del mismo. 10) \u00bfQu\u00e9 son las pruebas alpha? Las pruebas alpha : es un proceso interno que llevan a cabo los desarrolladores para identificar y corregir errores de software. Esta prueba garantiza que los usuarios obtengan una aplicaci\u00f3n libre de fallas y errores al evaluar su calidad y preparaci\u00f3n para la prueba Beta. 11) \u00bfQu\u00e9 son las pruebas beta? Las pruebas beta : es la fase que le sigue a las pruebas alpha, es un proceso que permite verificar y demostrar la calidad de un programa cuando est\u00e1 terminado de forma completa o parcial. En ella involucran a usuarios reales que eval\u00faan el software para proporcionar comentarios sobre la funcionalidad y la usabilidad. 12) \u00bfQu\u00e9 son las pruebas de aceptaci\u00f3n? Las pruebas de aceptaci\u00f3n : son las \u00faltimas pruebas realizadas donde el cliente prueba el software, a fin de determinar si cumplen con las necesidades y/o requerimientos de las empresas y sus usuarios. 13) Instala el plugin Gradle para Netbeans. 14) Crea un proyecto nuevo de tipo Single Gradle Project y nombre empleado , que contenga la clase principal Empleado . 15) En Sources Packages edita el c\u00f3digo de la clase Empleado y en Test Packages edita el c\u00f3digo de la clase EmpleadoTest . Sigue los pasos indicados en el siguiente tutorial: https://www.discoduroderoer.es/como-hacer-una-aplicacion-de-prueba-con-junit/ NOTA: En JUnit, el m\u00e9todo con anotaci\u00f3n @BeforeClass debe ser est\u00e1tico y, por tanto, las variables y objetos de los que haga uso tambi\u00e9n deben serlo. 16) Pulsa Alt+F6 para construir y ejecutar las pruebas. NOTA: Existen muchas otras tareas que pueden realizarse en Gradle. Sin embargo, la tarea run fallar\u00e1 puesto que no existe m\u00e9todo main . 17) Clona el repositorio https://github.com/jamj2000/DAW1-ED-Pruebas-Ejemplo1 en tu equipo local. 18) Comprueba que en el archivo build.gradle aparece la l\u00ednea: apply plugin: \"jacoco\" 19) Comprueba que en el archivo build.gradle aparecen tambi\u00e9n las l\u00edneas: jacocoTestReport { reports { xml.enabled false csv.enabled false html.destination file(\"${buildDir}/jacocoHtml\") } } 20) Ejecuta el comando gradle tasks para ver las tareas disponibles. 21) Ejecuta el comando gradle test para construir y pasar los tests. 22) Ejecuta el comando gradle jacocoTestReport para generar informe de cobertura de c\u00f3digo. Para visualizar dicho informe ejecuta firefox build/jacocoHtml/index.html . 23) Modifica y a\u00f1ade los tests necesarios para que la cobertura de c\u00f3digo sea completa. 24) Modifica el c\u00f3digo fuente de la clase Utilidades.java para solucionar los errores que aparecen y superar los tests. Integraci\u00f3n 1) \u00bfIndica al menos 3 servicios web de Integraci\u00f3n Continua? Servicios web de Integraci\u00f3n Continua : Jenkins Bamboo TravisCI 2) En GitHub, haz un fork del repositorio https://github.com/jamj2000/DAW1-ED-Pruebas-Ejemplo1. 3) Edita el archivo .travis.yml de tu repositorio bifurcado, en caso de ser necesario. 4) Reg\u00edstrate con tu cuenta de GitHub en TravisCI (https://travis-ci.org/) 5) En TravisCI, a\u00f1ade tu repositorio remoto (bifurcado) para construir y realizar los tests en dicho sitio web. 6) En TravisCI, haz click en el *badge* o insignia que aparece en la parte superior derecha, y copia el c\u00f3digo en formato Markdown. 7) En GitHub, en tu repositorio bifurcado, copia el c\u00f3digo Markdown anterior en el archivo README.md. 8) [ Opcional. Vale por 1 pto en la nota de esta Unidad ] En una plataforma Linux (preferiblemente Ubuntu), realiza la instalaci\u00f3n de un servicio de Integraci\u00f3n Continua basado en Jenkins. Explica los pasos seguidos y elabora un documento PDF donde quede reflejado todo el proceso y las pruebas que has realizado. Deber\u00e1s seguir los pasos indicados en el enlace de instrucciones que aparece a continuaci\u00f3n. INSTRUCCIONES: https://yeiei.net/es/como-construir-un-entorno-de-integracion-continua-con-jenkins-y-docker/ Calidad 1) \u00bfQu\u00e9 significan las siglas QA y QC? \u00bfQu\u00e9 diferencia existe entre ellas? QA = Quality Assurance. QA es un conjunto de actividades para garantizar la calidad en los procesos mediante los cuales se desarrollan los productos. QC = Quality Control. QC es un conjunto de actividades para garantizar la calidad de los productos . Las actividades se centran en identificar defectos en los productos reales producidos. 2) Explica brevemente cada uno de los factores de calidad que aparecen en las diapositivas. Factores de calidad : Correci\u00f3n : el software cumple las especificaciones. Fiabilidad : grado en el que el software es confiable, es decir, no tiene fallos. Eficiencia : cantidad de recursos hardware y software que necesita un producto para realizar las operaciones. Seguridad : grado en el que puede controlarse el acceso al software y a los datos. Facilidad de uso : grado de esfuerzo necesario para utilizar el software. Mantenibilidad : esfuerzo requerido para localizar y reparar errores. Flexibilidad : esfuerzo necesario para modificar un programa en funcionamiento. Facilidad de prueba : esfuerzo requerido para probar un programa de forma que cumpla con lo especificado en los requisitos. Portabilidad : facilidad para transferir la aplicaci\u00f3n a otro hardware o sistema operativo. Reusabilidad : grado en el que un programa o parte del mismo se puede utilizar en otras aplicaciones. Interoperatividad : esfuerzo necesario para que un software opere o comunique conjuntamente con otros sistemas.","title":"Unidad 3"},{"location":"Ejericicios_Unidad_3/#pruebas","text":"1) \u00bfQu\u00e9 diferencia existe entre las pruebas est\u00e1ticas y din\u00e1micas? La diferencia entre ambos es: En las pruebas est\u00e1ticas : las pruebas se realiza sin ejecutar el c\u00f3digo de la aplicaci\u00f3n. Y se examinan o revisa el c\u00f3digo fuente. Y en las pruebas din\u00e1micas : todas las pruebas se realiza ejecutando el c\u00f3digo de la aplicaci\u00f3n. Tambi\u00e9n se permite el uso de caja negra y caja blanca con mayor amplitud. Y permiten medir el comportamiento de la aplicaci\u00f3n desarrollada. Puedes consultar: https://es.wikipedia.org/wiki/Pruebas_de_software 2) \u00bfQu\u00e9 diferencia existe entre las pruebas de caja negra y caja blanca? La diferencia entre ambos es: Las pruebas de caja negra : son casos de pruebas donde se dise\u00f1an considerando exclusivamente las entradas y las salidas del sistema, sin preocuparse de la estructura interna del mismo. En resumen, se estudia el sistema desde fuera. Son pruebas de funcionalidad . Las pruebas de caja blanca : son casos de pruebas que examina el c\u00f3digo fuente y su ejecuci\u00f3n. Son pruebas estructurales . Puedes consultar: https://es.wikipedia.org/wiki/Pruebas_de_software 3) \u00bfQu\u00e9 diferencia existe entre las pruebas funcionales y no funcionales? La diferencia entre ambos es: Las pruebas funcionales : es una prueba basada en la ejecuci\u00f3n, revisi\u00f3n y retroalimentaci\u00f3n de las funcionalidades previamente dise\u00f1adas para el software. Eval\u00faan el cumplimiento de los requisitos funcionales . Las pruebas no funcionales : es una prueba cuyo objetivo es la verificaci\u00f3n de un requisito que especifica criterios que pueden usarse para juzgar la operaci\u00f3n de un sistema. Eval\u00faan aspectos adicionales como rendimiento, seguridad, ... Puedes consultar: https://es.wikipedia.org/wiki/Pruebas_de_software 4) Nombra al menos 4 pruebas funcionales. Pruebas funcionales : Pruebas unitarias (o de unidad) Pruebas de regresi\u00f3n Pruebas de integraci\u00f3n Pruebas del sistema 5) Nombra al menos 4 pruebas no funcionales. Pruebas NO funcionales : Pruebas de usabilidad Pruebas de rendimiento Pruebas de seguridad Pruebas de compatibilidad 6) \u00bfQu\u00e9 son las pruebas unitarias o pruebas de unidad? Las pruebas unitarias (o de unidad) consisten en verificar el correcto funcionamiento de las unidades individuales m\u00e1s peque\u00f1as de los programas inform\u00e1ticos. Se utiliza para garantizar que la unidad de c\u00f3digo funciona correctamente y cumple con los requisitos especificados. 7) \u00bfQu\u00e9 son las pruebas de regresi\u00f3n? Las pruebas de regresi\u00f3n : es el proceso de probar un producto de software despu\u00e9s de que se hayan realizado cambios para garantizar que no se hayan introducido nuevos errores como resultado de los cambios. 8) \u00bfQu\u00e9 son las pruebas de integraci\u00f3n? Las pruebas de integraci\u00f3n : se realizan a continuaci\u00f3n de las unitarias, su objetivo es comprobar que todos los elementos unitarios que componen el software, funcionan correctamente cuando cooperan entre s\u00ed para realizar las tareas encomendadas al programa. 9) \u00bfQu\u00e9 son las pruebas de humo? Las pruebas de humo : son una revisi\u00f3n r\u00e1pida de un producto de software para comprobar que funciona y no tiene defectos evidentes que interrumpan la operaci\u00f3n b\u00e1sica del mismo. 10) \u00bfQu\u00e9 son las pruebas alpha? Las pruebas alpha : es un proceso interno que llevan a cabo los desarrolladores para identificar y corregir errores de software. Esta prueba garantiza que los usuarios obtengan una aplicaci\u00f3n libre de fallas y errores al evaluar su calidad y preparaci\u00f3n para la prueba Beta. 11) \u00bfQu\u00e9 son las pruebas beta? Las pruebas beta : es la fase que le sigue a las pruebas alpha, es un proceso que permite verificar y demostrar la calidad de un programa cuando est\u00e1 terminado de forma completa o parcial. En ella involucran a usuarios reales que eval\u00faan el software para proporcionar comentarios sobre la funcionalidad y la usabilidad. 12) \u00bfQu\u00e9 son las pruebas de aceptaci\u00f3n? Las pruebas de aceptaci\u00f3n : son las \u00faltimas pruebas realizadas donde el cliente prueba el software, a fin de determinar si cumplen con las necesidades y/o requerimientos de las empresas y sus usuarios. 13) Instala el plugin Gradle para Netbeans. 14) Crea un proyecto nuevo de tipo Single Gradle Project y nombre empleado , que contenga la clase principal Empleado . 15) En Sources Packages edita el c\u00f3digo de la clase Empleado y en Test Packages edita el c\u00f3digo de la clase EmpleadoTest . Sigue los pasos indicados en el siguiente tutorial: https://www.discoduroderoer.es/como-hacer-una-aplicacion-de-prueba-con-junit/ NOTA: En JUnit, el m\u00e9todo con anotaci\u00f3n @BeforeClass debe ser est\u00e1tico y, por tanto, las variables y objetos de los que haga uso tambi\u00e9n deben serlo. 16) Pulsa Alt+F6 para construir y ejecutar las pruebas. NOTA: Existen muchas otras tareas que pueden realizarse en Gradle. Sin embargo, la tarea run fallar\u00e1 puesto que no existe m\u00e9todo main . 17) Clona el repositorio https://github.com/jamj2000/DAW1-ED-Pruebas-Ejemplo1 en tu equipo local. 18) Comprueba que en el archivo build.gradle aparece la l\u00ednea: apply plugin: \"jacoco\" 19) Comprueba que en el archivo build.gradle aparecen tambi\u00e9n las l\u00edneas: jacocoTestReport { reports { xml.enabled false csv.enabled false html.destination file(\"${buildDir}/jacocoHtml\") } } 20) Ejecuta el comando gradle tasks para ver las tareas disponibles. 21) Ejecuta el comando gradle test para construir y pasar los tests. 22) Ejecuta el comando gradle jacocoTestReport para generar informe de cobertura de c\u00f3digo. Para visualizar dicho informe ejecuta firefox build/jacocoHtml/index.html . 23) Modifica y a\u00f1ade los tests necesarios para que la cobertura de c\u00f3digo sea completa. 24) Modifica el c\u00f3digo fuente de la clase Utilidades.java para solucionar los errores que aparecen y superar los tests.","title":"Pruebas"},{"location":"Ejericicios_Unidad_3/#integracion","text":"1) \u00bfIndica al menos 3 servicios web de Integraci\u00f3n Continua? Servicios web de Integraci\u00f3n Continua : Jenkins Bamboo TravisCI 2) En GitHub, haz un fork del repositorio https://github.com/jamj2000/DAW1-ED-Pruebas-Ejemplo1. 3) Edita el archivo .travis.yml de tu repositorio bifurcado, en caso de ser necesario. 4) Reg\u00edstrate con tu cuenta de GitHub en TravisCI (https://travis-ci.org/) 5) En TravisCI, a\u00f1ade tu repositorio remoto (bifurcado) para construir y realizar los tests en dicho sitio web. 6) En TravisCI, haz click en el *badge* o insignia que aparece en la parte superior derecha, y copia el c\u00f3digo en formato Markdown. 7) En GitHub, en tu repositorio bifurcado, copia el c\u00f3digo Markdown anterior en el archivo README.md. 8) [ Opcional. Vale por 1 pto en la nota de esta Unidad ] En una plataforma Linux (preferiblemente Ubuntu), realiza la instalaci\u00f3n de un servicio de Integraci\u00f3n Continua basado en Jenkins. Explica los pasos seguidos y elabora un documento PDF donde quede reflejado todo el proceso y las pruebas que has realizado. Deber\u00e1s seguir los pasos indicados en el enlace de instrucciones que aparece a continuaci\u00f3n. INSTRUCCIONES: https://yeiei.net/es/como-construir-un-entorno-de-integracion-continua-con-jenkins-y-docker/","title":"Integraci\u00f3n"},{"location":"Ejericicios_Unidad_3/#calidad","text":"1) \u00bfQu\u00e9 significan las siglas QA y QC? \u00bfQu\u00e9 diferencia existe entre ellas? QA = Quality Assurance. QA es un conjunto de actividades para garantizar la calidad en los procesos mediante los cuales se desarrollan los productos. QC = Quality Control. QC es un conjunto de actividades para garantizar la calidad de los productos . Las actividades se centran en identificar defectos en los productos reales producidos. 2) Explica brevemente cada uno de los factores de calidad que aparecen en las diapositivas. Factores de calidad : Correci\u00f3n : el software cumple las especificaciones. Fiabilidad : grado en el que el software es confiable, es decir, no tiene fallos. Eficiencia : cantidad de recursos hardware y software que necesita un producto para realizar las operaciones. Seguridad : grado en el que puede controlarse el acceso al software y a los datos. Facilidad de uso : grado de esfuerzo necesario para utilizar el software. Mantenibilidad : esfuerzo requerido para localizar y reparar errores. Flexibilidad : esfuerzo necesario para modificar un programa en funcionamiento. Facilidad de prueba : esfuerzo requerido para probar un programa de forma que cumpla con lo especificado en los requisitos. Portabilidad : facilidad para transferir la aplicaci\u00f3n a otro hardware o sistema operativo. Reusabilidad : grado en el que un programa o parte del mismo se puede utilizar en otras aplicaciones. Interoperatividad : esfuerzo necesario para que un software opere o comunique conjuntamente con otros sistemas.","title":"Calidad"},{"location":"about/","text":"Torneo de Ajedrez Hace unos d\u00edas, los alumnos de los institutos Francisco Romero Vargas y Asta Regia han participado en un torneo de ajedrez organizado por este \u00faltimo Centro. La iniciativa, incluida en el programa educativo AulaDJaque del IES Asta Regia, ha sido un \u00e9xito en participaci\u00f3n del alumnado y de buen hacer del profesorado de ambos Institutos, Ampa e incluso de otros ciclos formativos del Centro. Rafael Cabello Montoro, coordinador de AulaDJaque, ha agradecido el esfuerzo de todos por llevar a cabo un torneo en el que al margen de la competici\u00f3n en s\u00ed, ha sido un \u00e9xito a todos los niveles, fomentando la buena armon\u00eda entre ambos centros educativos. Por nuestra parte, nuestro promotor ha sido Borja Plaza Pazos que lleva realizando esta labor por varios a\u00f1os ya consiguiendo que el ajedrez forme parte de nuestro entorno educativo El ganador fue finalmente el alumno de primero de ESO del IES Asta Regia, Wen Hao. En total, tomaron parte en el torneo un total de 70 alumnos, de ellos 54 pertenecientes al IES Asta Regia y 16 al Francisco Romero Vargas. Las espadas quedan en alto para la competici\u00f3n en nuestro Centro. https://www.diariodejerez.es/jerez/Torneo-ajedrez-IES-Asta-Regia_3_1675662428.html","title":"About"},{"location":"about/#torneo-de-ajedrez","text":"Hace unos d\u00edas, los alumnos de los institutos Francisco Romero Vargas y Asta Regia han participado en un torneo de ajedrez organizado por este \u00faltimo Centro. La iniciativa, incluida en el programa educativo AulaDJaque del IES Asta Regia, ha sido un \u00e9xito en participaci\u00f3n del alumnado y de buen hacer del profesorado de ambos Institutos, Ampa e incluso de otros ciclos formativos del Centro. Rafael Cabello Montoro, coordinador de AulaDJaque, ha agradecido el esfuerzo de todos por llevar a cabo un torneo en el que al margen de la competici\u00f3n en s\u00ed, ha sido un \u00e9xito a todos los niveles, fomentando la buena armon\u00eda entre ambos centros educativos. Por nuestra parte, nuestro promotor ha sido Borja Plaza Pazos que lleva realizando esta labor por varios a\u00f1os ya consiguiendo que el ajedrez forme parte de nuestro entorno educativo El ganador fue finalmente el alumno de primero de ESO del IES Asta Regia, Wen Hao. En total, tomaron parte en el torneo un total de 70 alumnos, de ellos 54 pertenecientes al IES Asta Regia y 16 al Francisco Romero Vargas. Las espadas quedan en alto para la competici\u00f3n en nuestro Centro. https://www.diariodejerez.es/jerez/Torneo-ajedrez-IES-Asta-Regia_3_1675662428.html","title":"Torneo de Ajedrez"},{"location":"Unidad_01/Ejercicio_Unidad_1-1/","text":"Ejercicios Unidad 1 Ciclo de vida del sofware 1). Define \"Ciclo de vida del sofware\" Es una secuencia estructurada y bien definida de las etapas en ingenier\u00eda de software para desarrollar el software deseado. 2). Nombra las fases principales del desarrollo de software y explica brevemente que se hace en cada una de ellas. AN\u00c1LISIS : determinar y definir las necesidades del cliente y especificar los requisitos que debe cumplir el software a desarrollar. DISE\u00d1O : descomponer y organizar el sistema en elementos por separados, y especificar la relaci\u00f3n y funci\u00f3n de los elementos. CODIFICACI\u00d3N : escribir el c\u00f3digo fuente de cada componente PRUEBAS : someter el programa a diferentes situaciones. MANTENIMIENTO : en casos de realizar cambios se rehace parte del trabajo en los pasos anteriores. 3). Explica brevemente en qu\u00e9 consiste el modelo en cascada cuando hablamos de desarrollo de sofware. Pues a la hora de gesti\u00f3n de proyectos se divide en fases ordenados. Y cada fase comienza reci\u00e9n cuando ha terminado la anterior. Este al ser un modelo antiguo no deja pr\u00e1cticamente ning\u00fan lugar para cambios o revisiones imprevistos. 4). Ventajas e inconvenientes del modelo en cascada. La ventaja es que es un modelo sencillo y f\u00e1cil de usar, y con una estructura sencilla en la que todo funci\u00f3n en orden por lo que facilita mucho su uso. La desventaja es que para los proyectos complejos no funciona porque no permite su divisi\u00f3n en fases ni tampoco los cambios ni revisiones. 5). \u00bfQu\u00e9 se entiende por verificaci\u00f3n?\u00bfY por validaci\u00f3n? Por verificaci\u00f3n se entiende que es comprobar o verificar algo, como el funcionamiento de un sistema o un proyecto. Por validaci\u00f3n es un proceso que revisa o v\u00e1lida el sistema para que cumpla con su funcionamiento y normas. 6). Explica como funciona el modelo de desarrollo mediante creaci\u00f3n de prototipos. Este modelo es utilizado principalmente para ofrecer al usuario una visi\u00f3n previa de c\u00f3mo ser\u00e1 el programa o sistema.","title":"Unidad 1-1"},{"location":"Unidad_01/Ejercicio_Unidad_1-1/#ejercicios-unidad-1","text":"","title":"Ejercicios Unidad 1"},{"location":"Unidad_01/Ejercicio_Unidad_1-1/#ciclo-de-vida-del-sofware","text":"1). Define \"Ciclo de vida del sofware\" Es una secuencia estructurada y bien definida de las etapas en ingenier\u00eda de software para desarrollar el software deseado. 2). Nombra las fases principales del desarrollo de software y explica brevemente que se hace en cada una de ellas. AN\u00c1LISIS : determinar y definir las necesidades del cliente y especificar los requisitos que debe cumplir el software a desarrollar. DISE\u00d1O : descomponer y organizar el sistema en elementos por separados, y especificar la relaci\u00f3n y funci\u00f3n de los elementos. CODIFICACI\u00d3N : escribir el c\u00f3digo fuente de cada componente PRUEBAS : someter el programa a diferentes situaciones. MANTENIMIENTO : en casos de realizar cambios se rehace parte del trabajo en los pasos anteriores. 3). Explica brevemente en qu\u00e9 consiste el modelo en cascada cuando hablamos de desarrollo de sofware. Pues a la hora de gesti\u00f3n de proyectos se divide en fases ordenados. Y cada fase comienza reci\u00e9n cuando ha terminado la anterior. Este al ser un modelo antiguo no deja pr\u00e1cticamente ning\u00fan lugar para cambios o revisiones imprevistos. 4). Ventajas e inconvenientes del modelo en cascada. La ventaja es que es un modelo sencillo y f\u00e1cil de usar, y con una estructura sencilla en la que todo funci\u00f3n en orden por lo que facilita mucho su uso. La desventaja es que para los proyectos complejos no funciona porque no permite su divisi\u00f3n en fases ni tampoco los cambios ni revisiones. 5). \u00bfQu\u00e9 se entiende por verificaci\u00f3n?\u00bfY por validaci\u00f3n? Por verificaci\u00f3n se entiende que es comprobar o verificar algo, como el funcionamiento de un sistema o un proyecto. Por validaci\u00f3n es un proceso que revisa o v\u00e1lida el sistema para que cumpla con su funcionamiento y normas. 6). Explica como funciona el modelo de desarrollo mediante creaci\u00f3n de prototipos. Este modelo es utilizado principalmente para ofrecer al usuario una visi\u00f3n previa de c\u00f3mo ser\u00e1 el programa o sistema.","title":"Ciclo de vida del sofware"},{"location":"Unidad_01/Ejercicio_Unidad_1-2/","text":"Entorno de desarrollo KANBAN, SCRUM y XP 1). KANBAN. Haz un resumen de la metodolog\u00eda Kanban e indica sus diferencias frente a SCRUM. Puedes consultar el siguiente enlace: \u00b7 https://es.atlassian.com/agile/kanban La metodolog\u00eda Kanban se implementa por medio de tableros Kanban, inventado por Toyota. Se trata de un m\u00e9todo visual de gesti\u00f3n de proyectos que permite a los equipos visualizar sus flujos de trabajo y la carga de trabajo. En un tablero Kanban, el trabajo se muestra en un proyecto en forma de tablero organizado por columnas. Tradicionalmente, cada columna representa una etapa del trabajo (Ej: Trabajo pendiente, En progreso y Terminado). Las metodolog\u00edas kanban son continuas y m\u00e1s fluidas, mientras que el scrum se basa en sprints de trabajo cortos y estructurados. 2). SCRUM. Explica como funciona Scrum. Consulta los siguientes enlaces: \u00b7 https://proyectosagiles.org/que-es-scrum/ \u00b7 https://proyectosagiles.org/como-funciona-scrum/ Scrum est\u00e1 estructurado para ayudar a los equipos a adaptarse de forma natural a las condiciones cambiantes y a los requisitos de los usuarios, con el cambio de prioridades integrado en el proceso y ciclos de lanzamiento breves para que tu equipo pueda aprender y mejorar constantemente. 3). SCRUM. Define los siguientes t\u00e9rminos: \u00b7 Product backlog: podr\u00eda definirse como un listado ordenado y priorizado de los requisitos necesarios para la implementaci\u00f3n de un proyecto. Debe contener descripciones de las funcionalidades y caracter\u00edsticas que se quieran en el producto, ordenadas en funci\u00f3n de su prioridad. \u00b7 Sprint backlog: es la suma de el Objetivo del Sprint, los elementos del Product Backlog elegidos para el Sprint, m\u00e1s un plan de acci\u00f3n de c\u00f3mo crear el Incremento de Producto 4). SCRUM. En la terminolog\u00eda Scrum qu\u00e9 terminos se utilizan como sin\u00f3nimo de: \u00b7 Jefe de proyecto = Scrum Master \u00b7 Cliente = Product Owner \u00b7 Equipo de desarrollo = Development Team 5). SCRUM. Haz un resumen de los requisitos para poder utilizar Scrum. Consulta el siguiente enlace: \u00b7 https://proyectosagiles.org/requisitos-de-scrum/ Cultura de empresa: trabajo en equipo, delegaci\u00f3n, creatividad y mejora continua. Compromiso de la Direcci\u00f3n: organizaci\u00f3n para resolver problemas y realizar cambios. Compromiso conjunto y colaboraci\u00f3n de los miembros del equipo. Relaci\u00f3n entre proveedor y cliente basada en ganar-ganar, colaboraci\u00f3n y transparencia. Facilidad para realizar cambios en el proyecto. Tama\u00f1o de cada equipo entre 5 y 9 personas. Equipo trabajando en un mismo espacio com\u00fan para maximizar la comunicaci\u00f3n. Dedicaci\u00f3n del equipo a tiempo completo. Estabilidad de los miembros del equipo 6). XP. Explica los 5 valores de la Programaci\u00f3n Extrema. Los 5 valores de eXtreme Programming: Comunicaci\u00f3n: objetivo de romper las cl\u00e1sicas barreras entre negocio y desarrollo. Promueve el trabajo mano a mano y no a trav\u00e9s de documentaci\u00f3n. Simplicidad: enfatiza mucho en poner el foco en codificar las necesidades de hoy. Feedback: comunicaci\u00f3n, y no solo con el cliente, sino en todas direcciones. Coraje: toma pr\u00e1cticas de sentido com\u00fan y las lleva al l\u00edmite, lo que muchas veces nos obliga a salir de nuestra zona de confort. Por ello, hay que ser valiente. Respeto: respeto por el trabajo de los dem\u00e1s y, sobre todo, respeto hacia uno mismo y tu trabajo. 7). XP. \u00bfCu\u00e1les son las caracter\u00edsticas distintivas de XP frente a otras metodolog\u00edas \u00e1giles? Expl\u00edcalas. Puedes consultar el siguiente enlace: \u00b7 http://www.davidvalverde.com/blog/introduccion-a-la-programacion-extrema-xp/ Al mismo tiempo que la metodolog\u00eda Agile recoge las buenas pr\u00e1cticas de un marco de trabajo espec\u00edfico. En ella, hay roles que se van repitiendo cada semana o 3-5 semanas. Pero se centra principalmente en la comunicaci\u00f3n con todos los involucrados en el proyectos, as\u00ed como la reutilizaci\u00f3n del c\u00f3digo ya desarrollado y la realimentaci\u00f3n.","title":"Unidad 1-2"},{"location":"Unidad_01/Ejercicio_Unidad_1-2/#entorno-de-desarrollo","text":"","title":"Entorno de desarrollo"},{"location":"Unidad_01/Ejercicio_Unidad_1-2/#kanban-scrum-y-xp","text":"1). KANBAN. Haz un resumen de la metodolog\u00eda Kanban e indica sus diferencias frente a SCRUM. Puedes consultar el siguiente enlace: \u00b7 https://es.atlassian.com/agile/kanban La metodolog\u00eda Kanban se implementa por medio de tableros Kanban, inventado por Toyota. Se trata de un m\u00e9todo visual de gesti\u00f3n de proyectos que permite a los equipos visualizar sus flujos de trabajo y la carga de trabajo. En un tablero Kanban, el trabajo se muestra en un proyecto en forma de tablero organizado por columnas. Tradicionalmente, cada columna representa una etapa del trabajo (Ej: Trabajo pendiente, En progreso y Terminado). Las metodolog\u00edas kanban son continuas y m\u00e1s fluidas, mientras que el scrum se basa en sprints de trabajo cortos y estructurados. 2). SCRUM. Explica como funciona Scrum. Consulta los siguientes enlaces: \u00b7 https://proyectosagiles.org/que-es-scrum/ \u00b7 https://proyectosagiles.org/como-funciona-scrum/ Scrum est\u00e1 estructurado para ayudar a los equipos a adaptarse de forma natural a las condiciones cambiantes y a los requisitos de los usuarios, con el cambio de prioridades integrado en el proceso y ciclos de lanzamiento breves para que tu equipo pueda aprender y mejorar constantemente. 3). SCRUM. Define los siguientes t\u00e9rminos: \u00b7 Product backlog: podr\u00eda definirse como un listado ordenado y priorizado de los requisitos necesarios para la implementaci\u00f3n de un proyecto. Debe contener descripciones de las funcionalidades y caracter\u00edsticas que se quieran en el producto, ordenadas en funci\u00f3n de su prioridad. \u00b7 Sprint backlog: es la suma de el Objetivo del Sprint, los elementos del Product Backlog elegidos para el Sprint, m\u00e1s un plan de acci\u00f3n de c\u00f3mo crear el Incremento de Producto 4). SCRUM. En la terminolog\u00eda Scrum qu\u00e9 terminos se utilizan como sin\u00f3nimo de: \u00b7 Jefe de proyecto = Scrum Master \u00b7 Cliente = Product Owner \u00b7 Equipo de desarrollo = Development Team 5). SCRUM. Haz un resumen de los requisitos para poder utilizar Scrum. Consulta el siguiente enlace: \u00b7 https://proyectosagiles.org/requisitos-de-scrum/ Cultura de empresa: trabajo en equipo, delegaci\u00f3n, creatividad y mejora continua. Compromiso de la Direcci\u00f3n: organizaci\u00f3n para resolver problemas y realizar cambios. Compromiso conjunto y colaboraci\u00f3n de los miembros del equipo. Relaci\u00f3n entre proveedor y cliente basada en ganar-ganar, colaboraci\u00f3n y transparencia. Facilidad para realizar cambios en el proyecto. Tama\u00f1o de cada equipo entre 5 y 9 personas. Equipo trabajando en un mismo espacio com\u00fan para maximizar la comunicaci\u00f3n. Dedicaci\u00f3n del equipo a tiempo completo. Estabilidad de los miembros del equipo 6). XP. Explica los 5 valores de la Programaci\u00f3n Extrema. Los 5 valores de eXtreme Programming: Comunicaci\u00f3n: objetivo de romper las cl\u00e1sicas barreras entre negocio y desarrollo. Promueve el trabajo mano a mano y no a trav\u00e9s de documentaci\u00f3n. Simplicidad: enfatiza mucho en poner el foco en codificar las necesidades de hoy. Feedback: comunicaci\u00f3n, y no solo con el cliente, sino en todas direcciones. Coraje: toma pr\u00e1cticas de sentido com\u00fan y las lleva al l\u00edmite, lo que muchas veces nos obliga a salir de nuestra zona de confort. Por ello, hay que ser valiente. Respeto: respeto por el trabajo de los dem\u00e1s y, sobre todo, respeto hacia uno mismo y tu trabajo. 7). XP. \u00bfCu\u00e1les son las caracter\u00edsticas distintivas de XP frente a otras metodolog\u00edas \u00e1giles? Expl\u00edcalas. Puedes consultar el siguiente enlace: \u00b7 http://www.davidvalverde.com/blog/introduccion-a-la-programacion-extrema-xp/ Al mismo tiempo que la metodolog\u00eda Agile recoge las buenas pr\u00e1cticas de un marco de trabajo espec\u00edfico. En ella, hay roles que se van repitiendo cada semana o 3-5 semanas. Pero se centra principalmente en la comunicaci\u00f3n con todos los involucrados en el proyectos, as\u00ed como la reutilizaci\u00f3n del c\u00f3digo ya desarrollado y la realimentaci\u00f3n.","title":"KANBAN, SCRUM y XP"},{"location":"Unidad_01/Ejercicio_Unidad_1-3/","text":"Entorno de desarrollo Lenguajes de programaci\u00f3n 1). \u00bfQu\u00e9 diferencia existe entre los lenguajes declarativos y los imperativos?. Nombra al menos 2 de cada tipo. Los lenguajes imperativos se especifica la secuencia de operaciones utilizado. Ejemplo: PHP, JavaScript. Mientras que los lenguajes declarativos se especifica el resultado deseado, no c\u00f3mo lograrlo. Ejemplo: SQL, Prolog. 2). \u00bfExplica qu\u00e9 es compilar? \u00bfExplica qu\u00e9 es interpretar? Compilar es el proceso de transformar un programa inform\u00e1tico escrito en un lenguaje en un programa equivalente en otro formato. Y interpretar es ejecutar el programa escrito a otro directamente, sin una previa compilaci\u00f3n del programa a instrucciones en lenguaje m\u00e1quina. 3). Ventajas de los lenguajes compilados. Un programa escrito en un lenguaje compilado posee la ventaja de no necesitar un programa anexo para ser ejecutado una vez que ha sido compilado. Adem\u00e1s, como s\u00f3lo es necesaria una traducci\u00f3n, la ejecuci\u00f3n se vuelve m\u00e1s r\u00e1pida. 4). Ventajas de los lenguajes interpretados. Multiplataforma. Puede estar en varios sistemas por lo que no tiene que adaptarse a una plataforma en concreto. Portabilidad. El programa puede llevarse a diferentes plataformas. Aumento del rendimiento. Algunos lenguajes interpretados, se ejecutan en el navegador cliente, lo que hace disminuir la carga de trabajo del servidor web. 5). Nombra 2 lenguajes compilados y otros 2 interpretados. Compilado: C, C++. Interpretado: PHP, JavaScript. 6). \u00bfPuede considerarse c\u00f3digo objeto el bytecode generado en Java tras la compilaci\u00f3n? Explica la respuesta. Si, porque el c\u00f3digo fuente Java se compila y se obtiene un c\u00f3digo binario intermedio denominado bytecode. Este puede considerarse c\u00f3digo objeto pero destinado a la m\u00e1quina virtual de Java en lugar de c\u00f3digo objeto nativo. 7). Pon un ejemplo de lenguaje de los siguientes tipos: Bajo nivel: ensamblador. Nivel medio: C. Alto nivel: Java. 8). \u00bfQu\u00e9 paradigma de programaci\u00f3n siguen los siguientes lenguajes? C --> imperativa, estructurado C++ --> imperativa, multiparadigma SQL --> declarativa, algebraico Java --> imperativa, orientado a objetos Javascript --> imperativa, multiparadigma Lisp --> declarativa, funcinale Prolog --> declarativa, l\u00f3gico Puedes consultar el siguiente enlace: https://es.wikipedia.org/wiki/Paradigma_de_programaci%C3%B3n 9). Explica qu\u00e9 criterios pueden seguirse a la hora de elegir un lenguade de programaci\u00f3n para el desarrollo software. Campo de aplicaci\u00f3n Experiencia previa Herramientas de desarrollo Documentaci\u00f3n disponible Base de usuarios Reusabilidad Transportabilidad Imposici\u00f3n del cliente","title":"Unidad 1-3"},{"location":"Unidad_01/Ejercicio_Unidad_1-3/#entorno-de-desarrollo","text":"","title":"Entorno de desarrollo"},{"location":"Unidad_01/Ejercicio_Unidad_1-3/#lenguajes-de-programacion","text":"1). \u00bfQu\u00e9 diferencia existe entre los lenguajes declarativos y los imperativos?. Nombra al menos 2 de cada tipo. Los lenguajes imperativos se especifica la secuencia de operaciones utilizado. Ejemplo: PHP, JavaScript. Mientras que los lenguajes declarativos se especifica el resultado deseado, no c\u00f3mo lograrlo. Ejemplo: SQL, Prolog. 2). \u00bfExplica qu\u00e9 es compilar? \u00bfExplica qu\u00e9 es interpretar? Compilar es el proceso de transformar un programa inform\u00e1tico escrito en un lenguaje en un programa equivalente en otro formato. Y interpretar es ejecutar el programa escrito a otro directamente, sin una previa compilaci\u00f3n del programa a instrucciones en lenguaje m\u00e1quina. 3). Ventajas de los lenguajes compilados. Un programa escrito en un lenguaje compilado posee la ventaja de no necesitar un programa anexo para ser ejecutado una vez que ha sido compilado. Adem\u00e1s, como s\u00f3lo es necesaria una traducci\u00f3n, la ejecuci\u00f3n se vuelve m\u00e1s r\u00e1pida. 4). Ventajas de los lenguajes interpretados. Multiplataforma. Puede estar en varios sistemas por lo que no tiene que adaptarse a una plataforma en concreto. Portabilidad. El programa puede llevarse a diferentes plataformas. Aumento del rendimiento. Algunos lenguajes interpretados, se ejecutan en el navegador cliente, lo que hace disminuir la carga de trabajo del servidor web. 5). Nombra 2 lenguajes compilados y otros 2 interpretados. Compilado: C, C++. Interpretado: PHP, JavaScript. 6). \u00bfPuede considerarse c\u00f3digo objeto el bytecode generado en Java tras la compilaci\u00f3n? Explica la respuesta. Si, porque el c\u00f3digo fuente Java se compila y se obtiene un c\u00f3digo binario intermedio denominado bytecode. Este puede considerarse c\u00f3digo objeto pero destinado a la m\u00e1quina virtual de Java en lugar de c\u00f3digo objeto nativo. 7). Pon un ejemplo de lenguaje de los siguientes tipos: Bajo nivel: ensamblador. Nivel medio: C. Alto nivel: Java. 8). \u00bfQu\u00e9 paradigma de programaci\u00f3n siguen los siguientes lenguajes? C --> imperativa, estructurado C++ --> imperativa, multiparadigma SQL --> declarativa, algebraico Java --> imperativa, orientado a objetos Javascript --> imperativa, multiparadigma Lisp --> declarativa, funcinale Prolog --> declarativa, l\u00f3gico Puedes consultar el siguiente enlace: https://es.wikipedia.org/wiki/Paradigma_de_programaci%C3%B3n 9). Explica qu\u00e9 criterios pueden seguirse a la hora de elegir un lenguade de programaci\u00f3n para el desarrollo software. Campo de aplicaci\u00f3n Experiencia previa Herramientas de desarrollo Documentaci\u00f3n disponible Base de usuarios Reusabilidad Transportabilidad Imposici\u00f3n del cliente","title":"Lenguajes de programaci\u00f3n"},{"location":"Unidad_02/Ejercicio_Unidad_2-1/","text":"Ejercicios Unidad 2 Heramientas de desarrollo 1). Ejecuta el programa \"Hola mundo\" en los siguientes lenguajes: bash python php javascript (nodejs) C C++ java ruby go rust lisp ensamblador (nasm) Los paquetes a instalar en Ubuntu son: python , php , nodejs , gcc , g++ , openjdk-8-jdk , ruby , golang , rustc , clisp y nasm . El c\u00f3digo fuente para distintos lenguajes de programaci\u00f3n est\u00e1 disponible en: https://es.wikipedia.org/wiki/Anexo:Ejemplos_de_implementaci%C3%B3n_del_%C2%ABHola_mundo%C2%BB Instrucciones en https://github.com/jamj2000/DAW1-ED-HolaMundo. 2). Para cada uno de los lenguajes anteriores, indica el proceso realizado para conseguir ejecutar el c\u00f3digo: \u00bfcompilaci\u00f3n o interpretaci\u00f3n? bash ---> interpretaci\u00f3n python ---> interpretaci\u00f3n php ---> interpretaci\u00f3n javascript (nodejs) ---> interpretaci\u00f3n C ---> compilaci\u00f3n C++ ---> compilaci\u00f3n java ---> compilaci\u00f3n ruby ---> interpretaci\u00f3n go ---> compilaci\u00f3n rust ---> compilaci\u00f3n lisp ---> interpretaci\u00f3n ensamblador (nasm) ---> compilador cruzado 3). Para cada uno de los lenguajes anteriores, indica el nombre del compilador o interprete utilizado en GNU/Linux. bash ---> SCRIPTS python ---> CPYTHON php ---> NETBEANS javascript (nodejs) ---> GCC C ---> GCC C++ ---> GCC java ---> JAVAC ruby ---> compilador JIT go ---> GO BUILD rust ---> RUSTC lisp ---> CAR/ CDR ensamblador (nasm) ---> GCC 4). Investiga y averigua que extensi\u00f3n tienen los archivos de c\u00f3digo fuente de los siguientes lenguajes: bash = .sh python = .py php = .php javascript = .js C = .c C++ = .cpp java = .java ensamblador (nasm) = .asm ruby = .rb go = .go rust = .rs lisp= .lisp 5). Scripts ejecutables para los lenguajes interpretados. Edita los scripts para los siguientes lenguajes: bash python php javascript java ruby go rust lisp Instrucciones en https://github.com/jamj2000/DAW1-ED-HolaMundo. 6). \u00bfQu\u00e9 extensi\u00f3n tienen los archivos de c\u00f3digo objeto? Los archivo la de c\u00f3digo objeto tiene extensi\u00f3n .obj . 7). Lenguaje C. C\u00f3digo en varios archivos. Obtener el c\u00f3digo objeto a partir del c\u00f3digo fuente de los 3 archivos siguientes: //------------- // datos.c //------------- char *mensaje=\"Hola a todos y todas\"; int num1 = 8; int num2 = 10; //------------- // suma.c //------------- int suma (int a, int b) { return a + b; } //------------- // main.c //------------- /#include <stdio.h> int suma (int a, int b); extern char *mensaje; extern int num1, num2; int main(){ printf(\"%s\\n\", mensaje); printf(\"%d\\n\", suma (num1, num2) ); return 0; } # Para obtener c\u00f3digo objeto gcc -c main.c datos.c suma.c Deberemos obtener 3 archivos: main.o , suma.o y datos.o 8). Lenguaje C. C\u00f3digo en varios archivos. Obtener el c\u00f3digo binario ejecutable a partir del c\u00f3digo objeto de los 3 archivos anteriores: # Para obtener c\u00f3digo binario gcc -o programa main.o datos.o suma.o Deberememos obtener un archivo programa binario ejecutable. Si lo ejecutamos obtenemos el siguiente resultado: ./programa Hola a todos y todas 18 Bibliotecas 11). Bibliotecas. Define que se entiende por biblioteca o librer\u00eda y los tipos que existen. En este sentido, una biblioteca o librer\u00eda es un conjunto de archivos que se utiliza para desarrollar software. Suele estar compuesta de c\u00f3digo y datos, y su fin es ser utilizada por otros programas de forma totalmente aut\u00f3noma. - Biblioteca est\u00e1tica. - Bibliotecas din\u00e1mica. 12). Bibliotecas. \u00bfQu\u00e9 tipo es el m\u00e1s utilizado actualmente? \u00bfPor qu\u00e9? La m\u00e1s utilizada son las bibliotecas din\u00e1micas (.DLL o .so) (.jar en Java). Ejemplos de librer\u00edas m\u00e1s usados: JavaScript, C++ y Python. Porque facilitan la gesti\u00f3n y aprovechamiento de la memoria del sistema. Permite al sistema operativo aplicar algoritmos que mejoren el rendimiento del sistema cuando se carguen estas bibliotecas. Adem\u00e1s, al estar compartidas, basta con mantener una copia en memoria para todos los programas que la utilicen. M\u00e1s informaci\u00f3n en https://github.com/jamj2000/DAW1-ED-Bibliotecas 13). Bibliotecas. Crea una biblioteca din\u00e1mica en C que proporcione las funciones para sumar, restar, multiplicar y dividir 2 n\u00fameros enteros. Crea un programa que haga uso de ella y comprueba que se ejecuta correctamente. Instrucciones en https://github.com/jamj2000/DAW1-ED-Bibliotecas 14). Bibliotecas. Crea una biblioteca din\u00e1mica en Java que proporcione las funciones para sumar, restar, multiplicar y dividir 2 n\u00fameros enteros. Crea un programa que haga uso de ella y comprueba que se ejecuta correctamente. Instrucciones en https://github.com/jamj2000/DAW1-ED-Bibliotecas 15). Bibliotecas. Busca informaci\u00f3n y explica las ventajas y desventajas de usar bibliotecas est\u00e1ticas. Ventaja : - No es necesario proporcionar las bibliotecas correspondientes al publicar el programa. - Biblioteca de carga r\u00e1pida. Desventaja : - La biblioteca est\u00e1 empaquetada en la aplicaci\u00f3n, lo que resulta en una gran biblioteca. - La biblioteca ha cambiado y es necesario volver a compilar el programa. 16). Bibliotecas. Busca informaci\u00f3n y explica las ventajas y desventajas de usar bibliotecas din\u00e1micas. Ventajas : 1. La programaci\u00f3n se centra completamente en la esencia del dise\u00f1o del programa, se mejora la simplicidad del c\u00f3digo y la eficiencia del desarrollo. 2. Debido a que la escala del programa se reduce, la inteligibilidad del programa tambi\u00e9n se mejora. Desventajas : 1. La velocidad de ejecuci\u00f3n del programa es lenta debido al lenguaje de tipo din\u00e1mico, la verificaci\u00f3n de tipo se realiza en tiempo de ejecuci\u00f3n. 2. No se pueden detectar errores sin ejecuci\u00f3n. Buildfile 17). Build. Automatiza el proceso de compilaci\u00f3n de ejecutable y biblioteca, su enlazado y la generaci\u00f3n del archivo ejecutable para c\u00f3digo fuente en C con make. Haz uso de un buildfile. Instrucciones en https://github.com/jamj2000/DAW1-ED-Bibliotecas/blob/master/Build.md 18). Build. Automatiza el proceso de compilaci\u00f3n de ejecutable y biblioteca, su enlazado y la generaci\u00f3n del archivo .jar para c\u00f3digo fuente en Java con Ant. Haz uso de un buildfile. Instrucciones en https://github.com/jamj2000/DAW1-ED-Bibliotecas/blob/master/Build.md 19). Build. Automatiza el proceso de compilaci\u00f3n de ejecutable y biblioteca, su enlazado y la generaci\u00f3n del archivo .jar para c\u00f3digo fuente en Java con Maven. Haz uso de un buildfile. Instrucciones en https://github.com/jamj2000/DAW1-ED-Bibliotecas/blob/master/Maven.md 20). Build. Automatiza el proceso de compilaci\u00f3n de ejecutable y biblioteca, su enlazado y la generaci\u00f3n del archivo .jar para c\u00f3digo fuente en Java con Gradle. Haz uso de un buildfile. Instrucciones en https://github.com/jamj2000/DAW1-ED-Bibliotecas/blob/master/Gradle.md","title":"Unidad 2-1"},{"location":"Unidad_02/Ejercicio_Unidad_2-1/#ejercicios-unidad-2","text":"","title":"Ejercicios Unidad 2"},{"location":"Unidad_02/Ejercicio_Unidad_2-1/#heramientas-de-desarrollo","text":"1). Ejecuta el programa \"Hola mundo\" en los siguientes lenguajes: bash python php javascript (nodejs) C C++ java ruby go rust lisp ensamblador (nasm) Los paquetes a instalar en Ubuntu son: python , php , nodejs , gcc , g++ , openjdk-8-jdk , ruby , golang , rustc , clisp y nasm . El c\u00f3digo fuente para distintos lenguajes de programaci\u00f3n est\u00e1 disponible en: https://es.wikipedia.org/wiki/Anexo:Ejemplos_de_implementaci%C3%B3n_del_%C2%ABHola_mundo%C2%BB Instrucciones en https://github.com/jamj2000/DAW1-ED-HolaMundo. 2). Para cada uno de los lenguajes anteriores, indica el proceso realizado para conseguir ejecutar el c\u00f3digo: \u00bfcompilaci\u00f3n o interpretaci\u00f3n? bash ---> interpretaci\u00f3n python ---> interpretaci\u00f3n php ---> interpretaci\u00f3n javascript (nodejs) ---> interpretaci\u00f3n C ---> compilaci\u00f3n C++ ---> compilaci\u00f3n java ---> compilaci\u00f3n ruby ---> interpretaci\u00f3n go ---> compilaci\u00f3n rust ---> compilaci\u00f3n lisp ---> interpretaci\u00f3n ensamblador (nasm) ---> compilador cruzado 3). Para cada uno de los lenguajes anteriores, indica el nombre del compilador o interprete utilizado en GNU/Linux. bash ---> SCRIPTS python ---> CPYTHON php ---> NETBEANS javascript (nodejs) ---> GCC C ---> GCC C++ ---> GCC java ---> JAVAC ruby ---> compilador JIT go ---> GO BUILD rust ---> RUSTC lisp ---> CAR/ CDR ensamblador (nasm) ---> GCC 4). Investiga y averigua que extensi\u00f3n tienen los archivos de c\u00f3digo fuente de los siguientes lenguajes: bash = .sh python = .py php = .php javascript = .js C = .c C++ = .cpp java = .java ensamblador (nasm) = .asm ruby = .rb go = .go rust = .rs lisp= .lisp 5). Scripts ejecutables para los lenguajes interpretados. Edita los scripts para los siguientes lenguajes: bash python php javascript java ruby go rust lisp Instrucciones en https://github.com/jamj2000/DAW1-ED-HolaMundo. 6). \u00bfQu\u00e9 extensi\u00f3n tienen los archivos de c\u00f3digo objeto? Los archivo la de c\u00f3digo objeto tiene extensi\u00f3n .obj . 7). Lenguaje C. C\u00f3digo en varios archivos. Obtener el c\u00f3digo objeto a partir del c\u00f3digo fuente de los 3 archivos siguientes: //------------- // datos.c //------------- char *mensaje=\"Hola a todos y todas\"; int num1 = 8; int num2 = 10; //------------- // suma.c //------------- int suma (int a, int b) { return a + b; } //------------- // main.c //------------- /#include <stdio.h> int suma (int a, int b); extern char *mensaje; extern int num1, num2; int main(){ printf(\"%s\\n\", mensaje); printf(\"%d\\n\", suma (num1, num2) ); return 0; } # Para obtener c\u00f3digo objeto gcc -c main.c datos.c suma.c Deberemos obtener 3 archivos: main.o , suma.o y datos.o 8). Lenguaje C. C\u00f3digo en varios archivos. Obtener el c\u00f3digo binario ejecutable a partir del c\u00f3digo objeto de los 3 archivos anteriores: # Para obtener c\u00f3digo binario gcc -o programa main.o datos.o suma.o Deberememos obtener un archivo programa binario ejecutable. Si lo ejecutamos obtenemos el siguiente resultado: ./programa Hola a todos y todas 18","title":"Heramientas de desarrollo"},{"location":"Unidad_02/Ejercicio_Unidad_2-1/#bibliotecas","text":"11). Bibliotecas. Define que se entiende por biblioteca o librer\u00eda y los tipos que existen. En este sentido, una biblioteca o librer\u00eda es un conjunto de archivos que se utiliza para desarrollar software. Suele estar compuesta de c\u00f3digo y datos, y su fin es ser utilizada por otros programas de forma totalmente aut\u00f3noma. - Biblioteca est\u00e1tica. - Bibliotecas din\u00e1mica. 12). Bibliotecas. \u00bfQu\u00e9 tipo es el m\u00e1s utilizado actualmente? \u00bfPor qu\u00e9? La m\u00e1s utilizada son las bibliotecas din\u00e1micas (.DLL o .so) (.jar en Java). Ejemplos de librer\u00edas m\u00e1s usados: JavaScript, C++ y Python. Porque facilitan la gesti\u00f3n y aprovechamiento de la memoria del sistema. Permite al sistema operativo aplicar algoritmos que mejoren el rendimiento del sistema cuando se carguen estas bibliotecas. Adem\u00e1s, al estar compartidas, basta con mantener una copia en memoria para todos los programas que la utilicen. M\u00e1s informaci\u00f3n en https://github.com/jamj2000/DAW1-ED-Bibliotecas 13). Bibliotecas. Crea una biblioteca din\u00e1mica en C que proporcione las funciones para sumar, restar, multiplicar y dividir 2 n\u00fameros enteros. Crea un programa que haga uso de ella y comprueba que se ejecuta correctamente. Instrucciones en https://github.com/jamj2000/DAW1-ED-Bibliotecas 14). Bibliotecas. Crea una biblioteca din\u00e1mica en Java que proporcione las funciones para sumar, restar, multiplicar y dividir 2 n\u00fameros enteros. Crea un programa que haga uso de ella y comprueba que se ejecuta correctamente. Instrucciones en https://github.com/jamj2000/DAW1-ED-Bibliotecas 15). Bibliotecas. Busca informaci\u00f3n y explica las ventajas y desventajas de usar bibliotecas est\u00e1ticas. Ventaja : - No es necesario proporcionar las bibliotecas correspondientes al publicar el programa. - Biblioteca de carga r\u00e1pida. Desventaja : - La biblioteca est\u00e1 empaquetada en la aplicaci\u00f3n, lo que resulta en una gran biblioteca. - La biblioteca ha cambiado y es necesario volver a compilar el programa. 16). Bibliotecas. Busca informaci\u00f3n y explica las ventajas y desventajas de usar bibliotecas din\u00e1micas. Ventajas : 1. La programaci\u00f3n se centra completamente en la esencia del dise\u00f1o del programa, se mejora la simplicidad del c\u00f3digo y la eficiencia del desarrollo. 2. Debido a que la escala del programa se reduce, la inteligibilidad del programa tambi\u00e9n se mejora. Desventajas : 1. La velocidad de ejecuci\u00f3n del programa es lenta debido al lenguaje de tipo din\u00e1mico, la verificaci\u00f3n de tipo se realiza en tiempo de ejecuci\u00f3n. 2. No se pueden detectar errores sin ejecuci\u00f3n.","title":"Bibliotecas"},{"location":"Unidad_02/Ejercicio_Unidad_2-1/#buildfile","text":"17). Build. Automatiza el proceso de compilaci\u00f3n de ejecutable y biblioteca, su enlazado y la generaci\u00f3n del archivo ejecutable para c\u00f3digo fuente en C con make. Haz uso de un buildfile. Instrucciones en https://github.com/jamj2000/DAW1-ED-Bibliotecas/blob/master/Build.md 18). Build. Automatiza el proceso de compilaci\u00f3n de ejecutable y biblioteca, su enlazado y la generaci\u00f3n del archivo .jar para c\u00f3digo fuente en Java con Ant. Haz uso de un buildfile. Instrucciones en https://github.com/jamj2000/DAW1-ED-Bibliotecas/blob/master/Build.md 19). Build. Automatiza el proceso de compilaci\u00f3n de ejecutable y biblioteca, su enlazado y la generaci\u00f3n del archivo .jar para c\u00f3digo fuente en Java con Maven. Haz uso de un buildfile. Instrucciones en https://github.com/jamj2000/DAW1-ED-Bibliotecas/blob/master/Maven.md 20). Build. Automatiza el proceso de compilaci\u00f3n de ejecutable y biblioteca, su enlazado y la generaci\u00f3n del archivo .jar para c\u00f3digo fuente en Java con Gradle. Haz uso de un buildfile. Instrucciones en https://github.com/jamj2000/DAW1-ED-Bibliotecas/blob/master/Gradle.md","title":"Buildfile"},{"location":"Unidad_02/Ejercicios_Unidad_2-2/","text":"Entorno de desarrollo Entornos integrados de desarrollo 1). Instala el editor sublime text. Saca una captura de pantalla una vez instalado. 2). Personaliza Sublime text instalando los complementos m\u00e1s importantes. Consulta la p\u00e1gina https://www.genbetadev.com/desarrollo-web/10-packages-de-sublimetext-para-desarrolladores-web Emmet SideBarEnhancements HTML-CSS-JS Prettify Color Highlighter BracketHighlighter HTML5 Terminal JavaScriptNext ES6 PackageDev 3). \u00bfPara que sirve el complemento Emmet ? Haz uso de \u00e9l al escribir un archivo html de prueba. Emmet es un plugin que se puede incorporar en muchos editores de texto, como Sublime Text, Brackets, Eclipse, Netbeans. Permite que la parte mec\u00e1nica de la programaci\u00f3n, que es escribir los tags o palabras reservadas suponga mucho menos esfuerzo y tiempo. Archivo: prueba.html <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> <title>Prueba de Subline Text</title> <link rel=\"shortcut icon\" href=\"nieve.jpg\"> </head> <body> <h1>Subline Text con HTML</h1> <p>Lorem ipsum dolor sit, amet consectetur adipisicing, elit. Modi, animi!</p> <h2>Apartado 1</h2> <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Autem pariatur voluptates quasi rerum, vitae, tempore omnis exercitationem cupiditate animi, velit ullam doloremque quos minima.</p> <h2>Apartado 2</h2> <p>Lorem ipsum dolor sit amet consectetur adipisicing, elit. Et deserunt perferendis ad iure eaque iusto, at eius sapiente exercitationem doloribus atque quibusdam quod, corporis facere culpa, accusantium delectus odit, explicabo!</p> <h3>Ejemplo de editores de texto.</h3> <ul> <li><a href=\"https://es.wikipedia.org/wiki/Sublime_Text\">Subline text</a></li> <li><a href=\"https://es.wikipedia.org/wiki/NetBeans\">Netbeans</a></li> <li><a href=\"https://en.wikipedia.org/wiki/Brackets_(text_editor)\">Blackets(ingles)</a></li> <li><a href=\"https://es.wikipedia.org/wiki/Eclipse_(software)\">Eclipse</a></li> </ul> <h4>Imagen del medio ambinente.</h4> <img src=\"arbol.jpg\" alt=\"Naturaleza del arbol\" width=\"445\" height=\"345\"> </body> </html> 4). Instala el editor Visual Studio Code. Saca una captura de pantalla una vez instalado y funcionando. 5). Haz una comparativa de la funcionalidad ofrecida por Sublime text y la ofrecida por Visual Studio Code referente a los siguientes aspectos: Terminal integrado: En Visual Studio Code, ya tiene incorporado un terminal, est\u00e1 se puede cambiar el tama\u00f1o de la terminal y dividir las vistas para tener una o varias terminales visibles al mismo tiempo. En cambio, en Sublime no tiene soporte para terminal incorporado. Para tener un terminal, el editor sublime tiene un paquete de Terminal que debe instalarse para ejecutar la l\u00ednea de comando. Emmet incorporado: En Visual Studio, Emmet tiene un autocompletado de HTML, adem\u00e1s puede usarse para generar etiquetas a medida que las vamos escribiendo o para formatear texto ya existente. Tambi\u00e9n vale para CSS . En Sublime text hay que instalar el Emmet en el sitio web y tambi\u00e9n funciona tanto para HTML y CSS. Iconos para los tipos de archivos: En Visual Studio se usan iconos de estilo moderno, con l\u00edneas geom\u00e9tricas limpias, un equilibrio de 50/50 de positivo/negativo (claro/oscuro) y con met\u00e1foras directas y comprensibles. Sin embargo, en Sublime text se tiene que descargar el paquete para los iconos. Despu\u00e9s de instalar el paquete, autom\u00e1ticamente puede ver en el sidebar los iconos de los archivos que cambian seg\u00fan el formato o tipo de archivo que le corresponde. Atajo de teclas para comentar (Ctrl+Shift+7): En Visual Studio Code: primero pulsa [CTRL] + K (Vscode queda a la espera), despu\u00e9s pulsa [CTRL] + C para comentar y [CTRL] + U para descomentar. En Sublime text: para comentar/descomentar c\u00f3digo de forma r\u00e1pida podemos configurar la combinaci\u00f3n de teclas CTRL+ 7. Atajo de teclas para buscar y seleccionar (Ctrl+D): En Visual Studio Code --> Ctrl + D: una vez abierto el cuadro de b\u00fasqueda, se selecciona un determinado fragmento de c\u00f3digo y se a\u00f1ade autom\u00e1ticamente a la b\u00fasqueda, de forma que se identifiquen todas las coincidencias de dicho c\u00f3digo. En Sublime text --> Ctrl + D (para seleccionar) y Ctrl + F (para encontrar). 6). \u00bfQu\u00e9 paquetes b\u00e1sicos debemos instalar en Ubuntu para desarrollar en Java? Se instala Open JDK: $ sudo apt-get install openjdk-8-jdk Y se instala Geany: $ sudo apt-get install geany $ sudo apt-get install geany-plugins 7). Instala el entorno integrado Netbeans. Saca una captura de pantalla una vez instalado y funcionando. 8). Instala el entorno integrado Eclipse. Saca una captura de pantalla una vez instalado y funcionando. 9). Crea un proyecto en Java en Netbeans. Realiza su compilaci\u00f3n y ejecuci\u00f3n. 10). \u00bfQu\u00e9 sistema de construcci\u00f3n utiliza Netbeans para generar los archivos \"ejecutables\"? Mira en el directorio ra\u00edz del proyecto y examina qu\u00e9 buildfile utiliza de los vistos en el tema. Usa los sistemas de Java y HTML.","title":"Unidad 2-2"},{"location":"Unidad_02/Ejercicios_Unidad_2-2/#entorno-de-desarrollo","text":"","title":"Entorno de desarrollo"},{"location":"Unidad_02/Ejercicios_Unidad_2-2/#entornos-integrados-de-desarrollo","text":"1). Instala el editor sublime text. Saca una captura de pantalla una vez instalado. 2). Personaliza Sublime text instalando los complementos m\u00e1s importantes. Consulta la p\u00e1gina https://www.genbetadev.com/desarrollo-web/10-packages-de-sublimetext-para-desarrolladores-web Emmet SideBarEnhancements HTML-CSS-JS Prettify Color Highlighter BracketHighlighter HTML5 Terminal JavaScriptNext ES6 PackageDev 3). \u00bfPara que sirve el complemento Emmet ? Haz uso de \u00e9l al escribir un archivo html de prueba. Emmet es un plugin que se puede incorporar en muchos editores de texto, como Sublime Text, Brackets, Eclipse, Netbeans. Permite que la parte mec\u00e1nica de la programaci\u00f3n, que es escribir los tags o palabras reservadas suponga mucho menos esfuerzo y tiempo. Archivo: prueba.html <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> <title>Prueba de Subline Text</title> <link rel=\"shortcut icon\" href=\"nieve.jpg\"> </head> <body> <h1>Subline Text con HTML</h1> <p>Lorem ipsum dolor sit, amet consectetur adipisicing, elit. Modi, animi!</p> <h2>Apartado 1</h2> <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Autem pariatur voluptates quasi rerum, vitae, tempore omnis exercitationem cupiditate animi, velit ullam doloremque quos minima.</p> <h2>Apartado 2</h2> <p>Lorem ipsum dolor sit amet consectetur adipisicing, elit. Et deserunt perferendis ad iure eaque iusto, at eius sapiente exercitationem doloribus atque quibusdam quod, corporis facere culpa, accusantium delectus odit, explicabo!</p> <h3>Ejemplo de editores de texto.</h3> <ul> <li><a href=\"https://es.wikipedia.org/wiki/Sublime_Text\">Subline text</a></li> <li><a href=\"https://es.wikipedia.org/wiki/NetBeans\">Netbeans</a></li> <li><a href=\"https://en.wikipedia.org/wiki/Brackets_(text_editor)\">Blackets(ingles)</a></li> <li><a href=\"https://es.wikipedia.org/wiki/Eclipse_(software)\">Eclipse</a></li> </ul> <h4>Imagen del medio ambinente.</h4> <img src=\"arbol.jpg\" alt=\"Naturaleza del arbol\" width=\"445\" height=\"345\"> </body> </html> 4). Instala el editor Visual Studio Code. Saca una captura de pantalla una vez instalado y funcionando. 5). Haz una comparativa de la funcionalidad ofrecida por Sublime text y la ofrecida por Visual Studio Code referente a los siguientes aspectos: Terminal integrado: En Visual Studio Code, ya tiene incorporado un terminal, est\u00e1 se puede cambiar el tama\u00f1o de la terminal y dividir las vistas para tener una o varias terminales visibles al mismo tiempo. En cambio, en Sublime no tiene soporte para terminal incorporado. Para tener un terminal, el editor sublime tiene un paquete de Terminal que debe instalarse para ejecutar la l\u00ednea de comando. Emmet incorporado: En Visual Studio, Emmet tiene un autocompletado de HTML, adem\u00e1s puede usarse para generar etiquetas a medida que las vamos escribiendo o para formatear texto ya existente. Tambi\u00e9n vale para CSS . En Sublime text hay que instalar el Emmet en el sitio web y tambi\u00e9n funciona tanto para HTML y CSS. Iconos para los tipos de archivos: En Visual Studio se usan iconos de estilo moderno, con l\u00edneas geom\u00e9tricas limpias, un equilibrio de 50/50 de positivo/negativo (claro/oscuro) y con met\u00e1foras directas y comprensibles. Sin embargo, en Sublime text se tiene que descargar el paquete para los iconos. Despu\u00e9s de instalar el paquete, autom\u00e1ticamente puede ver en el sidebar los iconos de los archivos que cambian seg\u00fan el formato o tipo de archivo que le corresponde. Atajo de teclas para comentar (Ctrl+Shift+7): En Visual Studio Code: primero pulsa [CTRL] + K (Vscode queda a la espera), despu\u00e9s pulsa [CTRL] + C para comentar y [CTRL] + U para descomentar. En Sublime text: para comentar/descomentar c\u00f3digo de forma r\u00e1pida podemos configurar la combinaci\u00f3n de teclas CTRL+ 7. Atajo de teclas para buscar y seleccionar (Ctrl+D): En Visual Studio Code --> Ctrl + D: una vez abierto el cuadro de b\u00fasqueda, se selecciona un determinado fragmento de c\u00f3digo y se a\u00f1ade autom\u00e1ticamente a la b\u00fasqueda, de forma que se identifiquen todas las coincidencias de dicho c\u00f3digo. En Sublime text --> Ctrl + D (para seleccionar) y Ctrl + F (para encontrar). 6). \u00bfQu\u00e9 paquetes b\u00e1sicos debemos instalar en Ubuntu para desarrollar en Java? Se instala Open JDK: $ sudo apt-get install openjdk-8-jdk Y se instala Geany: $ sudo apt-get install geany $ sudo apt-get install geany-plugins 7). Instala el entorno integrado Netbeans. Saca una captura de pantalla una vez instalado y funcionando. 8). Instala el entorno integrado Eclipse. Saca una captura de pantalla una vez instalado y funcionando. 9). Crea un proyecto en Java en Netbeans. Realiza su compilaci\u00f3n y ejecuci\u00f3n. 10). \u00bfQu\u00e9 sistema de construcci\u00f3n utiliza Netbeans para generar los archivos \"ejecutables\"? Mira en el directorio ra\u00edz del proyecto y examina qu\u00e9 buildfile utiliza de los vistos en el tema. Usa los sistemas de Java y HTML.","title":"Entornos integrados de desarrollo"},{"location":"Unidad_04/Ejercicio_Unidad_4-1/","text":"Ejercicios Unidad 4 Optimizaci\u00f3n 1). \u00bfQu\u00e9 se entiende por hediondez del c\u00f3digo? Pon al menos 5 ejemplos. La hediondez del c\u00f3digo ( code smell en ingl\u00e9s) es cualquier s\u00edntoma en el c\u00f3digo fuente de un programa que posiblemente indica un problema m\u00e1s profundo. Las hediondeces del c\u00f3digo usualmente no son bug de programaci\u00f3n (errores): no son t\u00e9cnicamente incorrectos y no impiden que el programa funcione correctamente. Mas bien, indican deficiencias en el dise\u00f1o de software que puede ralentizar el desarrollo o aumentan el riesgo de errores o fallos en el futuro. Ejemplos: Checkstyle PMD FindBugspara Java Librer\u00edasReek Cane 2). \u00bfQu\u00e9 tipo de herramienta utilizamos para hacer an\u00e1lisis est\u00e1tico del c\u00f3digo? Tipos de herramientas: Linters Continuous Inspection o Continuous Analysis 3). \u00bfQu\u00e9 sitios web nos permiten hacer an\u00e1lisis est\u00e1tico del c\u00f3digo o Continuous Inspection ? Sitios web: Scrutinizer SonarQube 4). Instala en Netbeans/IntelliJ el plugin FindBugs/SpotBugs , si no lo tienes a\u00fan instalado. 5). Realiza an\u00e1lisis est\u00e1tico de c\u00f3digo para las clases del proyecto miapp . Consulta el siguiente enlace: an\u00e1lisis est\u00e1tico con FindBugs 6). Indica al menos un code smell relevante de cada clase. Explica c\u00f3mo podr\u00eda solucionarse. An\u00e1lisis din\u00e1mico: unit tests An\u00e1lisis est\u00e1tico: lint 7). \u00bfQu\u00e9 es la refactorizaci\u00f3n? Es el proceso de reestructurar un c\u00f3digo fuente, alterando su estructura interna sin cambiar su comportamiento externo. 8). \u00bfQu\u00e9 t\u00e9cnicas se utilizan a menudo a la hora de refactorizar? T\u00e9cnicas: Renombrado de variables Pasar c\u00f3digo duplicado a funciones Eliminaci\u00f3n de c\u00f3digo inalcanzable Eliminaci\u00f3n de c\u00f3digo redundante Eliminaci\u00f3n de c\u00f3digo muerto","title":"Unidad 4-1"},{"location":"Unidad_04/Ejercicio_Unidad_4-1/#ejercicios-unidad-4","text":"","title":"Ejercicios Unidad 4"},{"location":"Unidad_04/Ejercicio_Unidad_4-1/#optimizacion","text":"1). \u00bfQu\u00e9 se entiende por hediondez del c\u00f3digo? Pon al menos 5 ejemplos. La hediondez del c\u00f3digo ( code smell en ingl\u00e9s) es cualquier s\u00edntoma en el c\u00f3digo fuente de un programa que posiblemente indica un problema m\u00e1s profundo. Las hediondeces del c\u00f3digo usualmente no son bug de programaci\u00f3n (errores): no son t\u00e9cnicamente incorrectos y no impiden que el programa funcione correctamente. Mas bien, indican deficiencias en el dise\u00f1o de software que puede ralentizar el desarrollo o aumentan el riesgo de errores o fallos en el futuro. Ejemplos: Checkstyle PMD FindBugspara Java Librer\u00edasReek Cane 2). \u00bfQu\u00e9 tipo de herramienta utilizamos para hacer an\u00e1lisis est\u00e1tico del c\u00f3digo? Tipos de herramientas: Linters Continuous Inspection o Continuous Analysis 3). \u00bfQu\u00e9 sitios web nos permiten hacer an\u00e1lisis est\u00e1tico del c\u00f3digo o Continuous Inspection ? Sitios web: Scrutinizer SonarQube 4). Instala en Netbeans/IntelliJ el plugin FindBugs/SpotBugs , si no lo tienes a\u00fan instalado. 5). Realiza an\u00e1lisis est\u00e1tico de c\u00f3digo para las clases del proyecto miapp . Consulta el siguiente enlace: an\u00e1lisis est\u00e1tico con FindBugs 6). Indica al menos un code smell relevante de cada clase. Explica c\u00f3mo podr\u00eda solucionarse. An\u00e1lisis din\u00e1mico: unit tests An\u00e1lisis est\u00e1tico: lint 7). \u00bfQu\u00e9 es la refactorizaci\u00f3n? Es el proceso de reestructurar un c\u00f3digo fuente, alterando su estructura interna sin cambiar su comportamiento externo. 8). \u00bfQu\u00e9 t\u00e9cnicas se utilizan a menudo a la hora de refactorizar? T\u00e9cnicas: Renombrado de variables Pasar c\u00f3digo duplicado a funciones Eliminaci\u00f3n de c\u00f3digo inalcanzable Eliminaci\u00f3n de c\u00f3digo redundante Eliminaci\u00f3n de c\u00f3digo muerto","title":"Optimizaci\u00f3n"},{"location":"Unidad_04/Ejercicio_Unidad_4-2/","text":"Entorno de desarrollo Documentaci\u00f3n 0.1). Genera la documentaci\u00f3n t\u00e9cnica de Javadoc para el codigo fuente de alg\u00fan ejercicio Java que hayas realizado en clase. /** * Inserta un t\u00edtulo en la clase descripci\u00f3n. * Al ser el t\u00edtulo obligatorio, si es nulo o vac\u00edo se lanzar\u00e1 * una excepci\u00f3n. * * @param titulo El nuevo t\u00edtulo de la descripci\u00f3n. * @throws IllegalArgumentException Si titulo es null, est\u00e1 vac\u00edo o contiene s\u00f3lo espacios. */ public void setTitulo (String titulo) throws IllegalArgumentException { if (titulo == null || titulo.isBlank()) { throw new IllegalArgumentException(\"El t\u00edtulo no puede ser nulo o vac\u00edo\"); } else { this.titulo = titulo; } } 0.2). En tu repositorio \"Apuntes-ED\" de GitHub, crea un archivo SUMMARY.md con un contenido similar al siguiente: # Summary * [Unidad 1: Elementos de desarrollo del software](1.ELEMENTOS.md) * [Unidad 2: Entornos integrados de desarrollo](2.ENTORNOS.md) * [Unidad 3: Dise\u00f1o y realizaci\u00f3n de prueba](3.PRUEBAS.md) * [Unidad 4: Documentaci\u00f3n y optimizaci\u00f3n](4.DOCUMENTACION.md) * [Unidad 5: Elaboraci\u00f3n de diagramas de clases](5.DIAGRAMAS_CLASES.md) * [Unidad 6: Elaboraci\u00f3n de diagramas de comportamiento](6.DIAGRAMAS_COMPORTAMIENTO.md) Esto nos servir\u00e1 m\u00e1s adelante para generar la tabla de contenido de un futuro libro en GitBook. 0.3). En tu repositorio \"Apuntes-ED\" de GitHub, crea otro archivo book.json con el siguiente contenido: { \"gitbook\": \"3.x.x\", \"plugins\" : [ \"include-codeblock\", \"ace\" ], \"pluginsConfig\": { \"include-codeblock\": { \"template\":\"acefull\", \"unindent\": true } } } Esto nos servir\u00e1 m\u00e1s adelante para el coloreado de c\u00f3digo fuente de un futuro libro en GitBook. 1). Ahora vamos a generar un libro en distintos formatos (PDF, Mobi y ePub) para tus apuntes de ED. Para ello registrate en https://www.gitbook.com con tu cuenta de GitHub. 2). Inicia sesi\u00f3n de GitBook y pulsa en \"+New Book\" y despu\u00e9s en \"Book & Manual\". Rellena los campos de \"Title\" y \"Description\". Finalmente pulsa en \"Create Book\". 3). Pulsa en el logotipo que aparece en la parte superior izquierda para ir a la p\u00e1gina principal de GitBook. Luego, en la secci\u00f3n referida al libro que has creado, pulsa en la flecha que aparece al lado de \"Edit\" y despu\u00e9s en \"Settings\". 4). Despu\u00e9s pulsa en \"GitHub\" y \"Select a Repository\" y marca tu repositorio \"Apuntes-ED\" y finalmente \"Sync\". 5). Para ver y descargar el resultado en distintos formatos (PDF, Mobi y ePub) vuelve a la p\u00e1gina principal pinchando en el logotipo que aparece en la parte superior izquierda. Y despu\u00e9s pulsa en el t\u00edtulo del libro. 6). Ver\u00e1s un bot\u00f3n para descargar el libro en distintos formatos. Haz una descarga del libro en formato PDF.","title":"Unidad 4-2"},{"location":"Unidad_04/Ejercicio_Unidad_4-2/#entorno-de-desarrollo","text":"","title":"Entorno de desarrollo"},{"location":"Unidad_04/Ejercicio_Unidad_4-2/#documentacion","text":"0.1). Genera la documentaci\u00f3n t\u00e9cnica de Javadoc para el codigo fuente de alg\u00fan ejercicio Java que hayas realizado en clase. /** * Inserta un t\u00edtulo en la clase descripci\u00f3n. * Al ser el t\u00edtulo obligatorio, si es nulo o vac\u00edo se lanzar\u00e1 * una excepci\u00f3n. * * @param titulo El nuevo t\u00edtulo de la descripci\u00f3n. * @throws IllegalArgumentException Si titulo es null, est\u00e1 vac\u00edo o contiene s\u00f3lo espacios. */ public void setTitulo (String titulo) throws IllegalArgumentException { if (titulo == null || titulo.isBlank()) { throw new IllegalArgumentException(\"El t\u00edtulo no puede ser nulo o vac\u00edo\"); } else { this.titulo = titulo; } } 0.2). En tu repositorio \"Apuntes-ED\" de GitHub, crea un archivo SUMMARY.md con un contenido similar al siguiente: # Summary * [Unidad 1: Elementos de desarrollo del software](1.ELEMENTOS.md) * [Unidad 2: Entornos integrados de desarrollo](2.ENTORNOS.md) * [Unidad 3: Dise\u00f1o y realizaci\u00f3n de prueba](3.PRUEBAS.md) * [Unidad 4: Documentaci\u00f3n y optimizaci\u00f3n](4.DOCUMENTACION.md) * [Unidad 5: Elaboraci\u00f3n de diagramas de clases](5.DIAGRAMAS_CLASES.md) * [Unidad 6: Elaboraci\u00f3n de diagramas de comportamiento](6.DIAGRAMAS_COMPORTAMIENTO.md) Esto nos servir\u00e1 m\u00e1s adelante para generar la tabla de contenido de un futuro libro en GitBook. 0.3). En tu repositorio \"Apuntes-ED\" de GitHub, crea otro archivo book.json con el siguiente contenido: { \"gitbook\": \"3.x.x\", \"plugins\" : [ \"include-codeblock\", \"ace\" ], \"pluginsConfig\": { \"include-codeblock\": { \"template\":\"acefull\", \"unindent\": true } } } Esto nos servir\u00e1 m\u00e1s adelante para el coloreado de c\u00f3digo fuente de un futuro libro en GitBook. 1). Ahora vamos a generar un libro en distintos formatos (PDF, Mobi y ePub) para tus apuntes de ED. Para ello registrate en https://www.gitbook.com con tu cuenta de GitHub. 2). Inicia sesi\u00f3n de GitBook y pulsa en \"+New Book\" y despu\u00e9s en \"Book & Manual\". Rellena los campos de \"Title\" y \"Description\". Finalmente pulsa en \"Create Book\". 3). Pulsa en el logotipo que aparece en la parte superior izquierda para ir a la p\u00e1gina principal de GitBook. Luego, en la secci\u00f3n referida al libro que has creado, pulsa en la flecha que aparece al lado de \"Edit\" y despu\u00e9s en \"Settings\". 4). Despu\u00e9s pulsa en \"GitHub\" y \"Select a Repository\" y marca tu repositorio \"Apuntes-ED\" y finalmente \"Sync\". 5). Para ver y descargar el resultado en distintos formatos (PDF, Mobi y ePub) vuelve a la p\u00e1gina principal pinchando en el logotipo que aparece en la parte superior izquierda. Y despu\u00e9s pulsa en el t\u00edtulo del libro. 6). Ver\u00e1s un bot\u00f3n para descargar el libro en distintos formatos. Haz una descarga del libro en formato PDF.","title":"Documentaci\u00f3n"},{"location":"Unidad_04/Ejercicios_Unidad_4-3/","text":"Entorno de desarrollo Control de versiones 1). Adem\u00e1s de Git, \u00bfque otros sistemas de control de versiones existen? Sistemas de control de versiones m\u00e1s conocidos (adem\u00e1s de Git ): CVS Subversion Mercurial 2). En Git, \u00bfqu\u00e9 tres \u00e1reas existen? En Git, las \u00e1reas que existen son los siguientes: Working directory (directorio de trabajo) Staging area (\u00e1rea de preparaci\u00f3n) Repository (directorio de Git) 3). Busca en Internet un buen tutorial de GIT y real\u00edzalo. \u00bfDe qu\u00e9 tutorial se trata? Tutorial de git: https://programarfacil.com/blog/arduino-blog/git-y-github/ (Git y Github) 4). Visualiza el siguiente video y responde a las cuestiones que aparecen m\u00e1s abajo. https://www.youtube.com/watch?v=uR6G2v_WsRA 5). En Git, \u00bfpara qu\u00e9 sirve el comando git config ? El comando git config es una funci\u00f3n \u00fatil que sirve para definir valores de configuraci\u00f3n de Git a nivel de un proyecto global o local. Al ejecutar, se modificar\u00e1 un archivo de texto de configuraci\u00f3n. 6). En Git, \u00bfpara qu\u00e9 sirve el comando git init ? El comando git init crea un nuevo repositorio de Git. Puede convertir un proyecto existente en un repositorio de Git, o para inicializar un nuevo repositorio vac\u00edo. 7). En Git, \u00bfpara qu\u00e9 sirve el comando git clone ? El comando git clone se utiliza principalmente para apuntar a un repositorio existente y clonar o copiar dicho repositorio en un nuevo directorio, en otra ubicaci\u00f3n. 8). En Git, \u00bfpara qu\u00e9 sirve el comando git status ? El comando git status muestra el estado del directorio de trabajo y del \u00e1rea del entorno de ensayo. Permite ver los cambios que se han preparado, los que no y los archivos en los que Git no va a realizar el seguimiento. 9). En Git, \u00bfpara qu\u00e9 sirve el comando git add ? El comando git add a\u00f1ade un cambio del directorio de trabajo en el entorno de ensayo. De este modo, indica a Git que quieres incluir actualizaciones en un archivo concreto en la pr\u00f3xima confirmaci\u00f3n. 10). En Git, \u00bfpara qu\u00e9 sirve el comando git commit ? El comando git commit sirve para confirmar una instant\u00e1nea del directorio del entorno de ensayo en el historial de confirmaciones de los repositorios. 11). En Git, \u00bfpara qu\u00e9 sirve el comando git log ? El comando git log es una herramienta b\u00e1sica de Git para explorar el historial del repositorio. Se usa para buscar una versi\u00f3n concreta de un proyecto o saber los cambios que se introducir\u00e1n. 12). En Git, \u00bfpara qu\u00e9 sirve el comando git reset HEAD nombrearchivo ? El comando git reset HEAD~2 mueve la rama actual hacia atr\u00e1s dos confirmaciones, eliminando efectivamente las dos instant\u00e1neas que acabamos de crear del historial del proyecto. 13). En Git, \u00bfpara qu\u00e9 sirve el comando git checkout -- nombrearchivo ? El comando git checkout te permite navegar entre las ramas creadas por git branch. Al extraer una rama, se actualizan los archivos en el directorio de trabajo para que coincidan con la versi\u00f3n almacenada en esa rama, y \u200b\u200ble dice a Git que registre todas las confirmaciones nuevas en esa rama. 14). Visualiza el siguiente video y responde a las cuestiones que aparecen m\u00e1s abajo. https://www.youtube.com/watch?v=FyAAIHHClqI 15). En Git, \u00bfpara qu\u00e9 sirve el comando git branch ? El comando git branch te permite crear, enumerar y eliminar ramas, as\u00ed como cambiar su nombre. No te permite cambiar entre ramas o volver a unir un historial bifurcado. Por este motivo, git branch est\u00e1 estrechamente integrado con los comandos git checkout y git merge . 16). En Git, \u00bfpara qu\u00e9 sirve el comando git checkout ? El comando git checkout te permite navegar entre las ramas creadas por git branch. Al extraer una rama, se actualizan los archivos en el directorio de trabajo para que coincidan con la versi\u00f3n almacenada en esa rama, y \u200b\u200ble dice a Git que registre todas las confirmaciones nuevas en esa rama. 17). En Git, \u00bfpara qu\u00e9 sirve el comando git merge ? El comando git merge se usa para integrar o fusionar las l\u00edneas independientes de desarrollo creadas por git branch de una rama con otra rama. 18). En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo fast-forward. La herramienta de Fast Forward en Git Merge se utiliza para realizar fusiones de avance r\u00e1pido en las situaciones donde exista un proceso lineal desde el extremo de la rama actual y que se extienda hasta la rama de destino. 19). En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo 3-way. La fusi\u00f3n de 3-way se basa en 3 confirmaciones diferentes: El ancestro com\u00fan. La punta de la rama Master. La punta de la rama de funciones. Git identifica estas tres confirmaciones mediante instant\u00e1neas. Git compara el ancestro com\u00fan con cada una de las confirmaciones de punta.","title":"Unidad 4-3"},{"location":"Unidad_04/Ejercicios_Unidad_4-3/#entorno-de-desarrollo","text":"","title":"Entorno de desarrollo"},{"location":"Unidad_04/Ejercicios_Unidad_4-3/#control-de-versiones","text":"1). Adem\u00e1s de Git, \u00bfque otros sistemas de control de versiones existen? Sistemas de control de versiones m\u00e1s conocidos (adem\u00e1s de Git ): CVS Subversion Mercurial 2). En Git, \u00bfqu\u00e9 tres \u00e1reas existen? En Git, las \u00e1reas que existen son los siguientes: Working directory (directorio de trabajo) Staging area (\u00e1rea de preparaci\u00f3n) Repository (directorio de Git) 3). Busca en Internet un buen tutorial de GIT y real\u00edzalo. \u00bfDe qu\u00e9 tutorial se trata? Tutorial de git: https://programarfacil.com/blog/arduino-blog/git-y-github/ (Git y Github) 4). Visualiza el siguiente video y responde a las cuestiones que aparecen m\u00e1s abajo. https://www.youtube.com/watch?v=uR6G2v_WsRA 5). En Git, \u00bfpara qu\u00e9 sirve el comando git config ? El comando git config es una funci\u00f3n \u00fatil que sirve para definir valores de configuraci\u00f3n de Git a nivel de un proyecto global o local. Al ejecutar, se modificar\u00e1 un archivo de texto de configuraci\u00f3n. 6). En Git, \u00bfpara qu\u00e9 sirve el comando git init ? El comando git init crea un nuevo repositorio de Git. Puede convertir un proyecto existente en un repositorio de Git, o para inicializar un nuevo repositorio vac\u00edo. 7). En Git, \u00bfpara qu\u00e9 sirve el comando git clone ? El comando git clone se utiliza principalmente para apuntar a un repositorio existente y clonar o copiar dicho repositorio en un nuevo directorio, en otra ubicaci\u00f3n. 8). En Git, \u00bfpara qu\u00e9 sirve el comando git status ? El comando git status muestra el estado del directorio de trabajo y del \u00e1rea del entorno de ensayo. Permite ver los cambios que se han preparado, los que no y los archivos en los que Git no va a realizar el seguimiento. 9). En Git, \u00bfpara qu\u00e9 sirve el comando git add ? El comando git add a\u00f1ade un cambio del directorio de trabajo en el entorno de ensayo. De este modo, indica a Git que quieres incluir actualizaciones en un archivo concreto en la pr\u00f3xima confirmaci\u00f3n. 10). En Git, \u00bfpara qu\u00e9 sirve el comando git commit ? El comando git commit sirve para confirmar una instant\u00e1nea del directorio del entorno de ensayo en el historial de confirmaciones de los repositorios. 11). En Git, \u00bfpara qu\u00e9 sirve el comando git log ? El comando git log es una herramienta b\u00e1sica de Git para explorar el historial del repositorio. Se usa para buscar una versi\u00f3n concreta de un proyecto o saber los cambios que se introducir\u00e1n. 12). En Git, \u00bfpara qu\u00e9 sirve el comando git reset HEAD nombrearchivo ? El comando git reset HEAD~2 mueve la rama actual hacia atr\u00e1s dos confirmaciones, eliminando efectivamente las dos instant\u00e1neas que acabamos de crear del historial del proyecto. 13). En Git, \u00bfpara qu\u00e9 sirve el comando git checkout -- nombrearchivo ? El comando git checkout te permite navegar entre las ramas creadas por git branch. Al extraer una rama, se actualizan los archivos en el directorio de trabajo para que coincidan con la versi\u00f3n almacenada en esa rama, y \u200b\u200ble dice a Git que registre todas las confirmaciones nuevas en esa rama. 14). Visualiza el siguiente video y responde a las cuestiones que aparecen m\u00e1s abajo. https://www.youtube.com/watch?v=FyAAIHHClqI 15). En Git, \u00bfpara qu\u00e9 sirve el comando git branch ? El comando git branch te permite crear, enumerar y eliminar ramas, as\u00ed como cambiar su nombre. No te permite cambiar entre ramas o volver a unir un historial bifurcado. Por este motivo, git branch est\u00e1 estrechamente integrado con los comandos git checkout y git merge . 16). En Git, \u00bfpara qu\u00e9 sirve el comando git checkout ? El comando git checkout te permite navegar entre las ramas creadas por git branch. Al extraer una rama, se actualizan los archivos en el directorio de trabajo para que coincidan con la versi\u00f3n almacenada en esa rama, y \u200b\u200ble dice a Git que registre todas las confirmaciones nuevas en esa rama. 17). En Git, \u00bfpara qu\u00e9 sirve el comando git merge ? El comando git merge se usa para integrar o fusionar las l\u00edneas independientes de desarrollo creadas por git branch de una rama con otra rama. 18). En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo fast-forward. La herramienta de Fast Forward en Git Merge se utiliza para realizar fusiones de avance r\u00e1pido en las situaciones donde exista un proceso lineal desde el extremo de la rama actual y que se extienda hasta la rama de destino. 19). En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo 3-way. La fusi\u00f3n de 3-way se basa en 3 confirmaciones diferentes: El ancestro com\u00fan. La punta de la rama Master. La punta de la rama de funciones. Git identifica estas tres confirmaciones mediante instant\u00e1neas. Git compara el ancestro com\u00fan con cada una de las confirmaciones de punta.","title":"Control de versiones"}]}